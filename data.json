[
    {
        "task_name": "Группировка пользователей по возрасту",
        "url": "https://github.com/CorporationX/god_bless/pull/11100",
        "content": [
            {
                "filename": "src/main/java/groupUsersByAge/Main.java",
                "content": "+package groupUsersByAge;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+    }\n+}"
            },
            {
                "filename": "src/main/java/groupUsersByAge/User.java",
                "content": "+package groupUsersByAge;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Getter\n+@Setter\n+@AllArgsConstructor\n+@ToString\n+public class User {\n+    private String name;\n+    private int age;\n+    private String company;\n+    private String address;\n+\n+    public static Map<Integer, List<User>> groupUsersByAge(List<User> users) {\n+        Map<Integer, List<User>> groupedUsers = new HashMap<>();\n+        for (User user : users) {\n+            if (user.getAge() < 1) {\n+                throw new IllegalArgumentException(\"Incorrect age value\");\n+            }\n+            if (groupedUsers.containsKey(user.getAge())) {\n+                groupedUsers.get(user.getAge()).add(user);\n+            } else {\n+                List<User> userList = new ArrayList<>();\n+                userList.add(user);\n+                groupedUsers.put(user.getAge(), userList);\n+            }\n+        }\n+        return groupedUsers;\n+    }\n+}"
            },
            {
                "filename": "src/test/java/GroupUsersByAgeTest.java",
                "content": "+import groupUsersByAge.User;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class GroupUsersByAgeTest {\n+    public static List<User> ungroupedUserList;\n+\n+    @BeforeEach\n+    void setup() {\n+        ungroupedUserList = new ArrayList<>();\n+    }\n+\n+    @Test\n+    void testGroupUsers() {\n+        User userVasya = new User(\"Vasya\", 21, \"Google\", \"house1\");\n+        User userKolya = new User(\"Kolya\", 21, \"Apple\", \"house2\");\n+        User userSanya = new User(\"Sanya\", 24, \"Sony\", \"house14\");\n+        ungroupedUserList.add(userVasya);\n+        ungroupedUserList.add(userKolya);\n+        ungroupedUserList.add(userSanya);\n+\n+        Map<Integer, List<User>> groupedUsers = User.groupUsersByAge(ungroupedUserList);\n+\n+        assertTrue(groupedUsers.get(21).contains(userVasya));\n+        assertTrue(groupedUsers.get(21).contains(userKolya));\n+        assertTrue(groupedUsers.get(24).contains(userSanya));\n+\n+        assertEquals(2, groupedUsers.size());\n+    }\n+\n+    @Test\n+    void testExceptionThrowsWithIncorrectUserData() {\n+        User userVasya = new User(\"Vasya\", 21, \"Google\", \"house1\");\n+        User userVanya = new User(\"Vanya\", 0, \"Google\", \"house1\");\n+        ungroupedUserList.add(userVasya);\n+        ungroupedUserList.add(userVanya);\n+\n+        assertThrows(IllegalArgumentException.class, () -> User.groupUsersByAge(ungroupedUserList));\n+    }\n+}"
            }
        ],
        "comments": [
            {
                "file": "src/main/java/groupUsersByAge/User.java",
                "code": "@@ -0,0 +1,39 @@\n+package groupUsersByAge;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Getter\n+@Setter\n+@AllArgsConstructor\n+@ToString\n+public class User {\n+    private String name;\n+    private int age;\n+    private String company;\n+    private String address;\n+\n+    public static Map<Integer, List<User>> groupUsersByAge(List<User> users) {\n+        Map<Integer, List<User>> groupedUsers = new HashMap<>();\n+        for (User user : users) {\n+            if (user.getAge() < 1) {\n+                throw new IllegalArgumentException(\"Incorrect age value\");\n+            }\n+            if (groupedUsers.containsKey(user.getAge())) {\n+                groupedUsers.get(user.getAge()).add(user);\n+            } else {\n+                List<User> userList = new ArrayList<>();\n+                userList.add(user);\n+                groupedUsers.put(user.getAge(), userList);\n+            }",
                "suggestion": "Да, это верно, но можно сделать код лаконичней. Попробуй использовать метод класса Map putIfAbsent",
                "lines": [
                    29,
                    35
                ],
                "date": "2024-10-03T20:02:27Z"
            },
            {
                "file": "src/main/java/groupUsersByAge/User.java",
                "code": "@@ -0,0 +1,39 @@\n+package groupUsersByAge;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Getter\n+@Setter\n+@AllArgsConstructor\n+@ToString\n+public class User {\n+    private String name;\n+    private int age;\n+    private String company;\n+    private String address;\n+\n+    public static Map<Integer, List<User>> groupUsersByAge(List<User> users) {\n+        Map<Integer, List<User>> groupedUsers = new HashMap<>();\n+        for (User user : users) {\n+            if (user.getAge() < 1) {\n+                throw new IllegalArgumentException(\"Incorrect age value\");\n+            }",
                "suggestion": "валидацию можно вынести в отдельный метод)",
                "lines": [
                    26,
                    28
                ],
                "date": "2024-10-03T20:02:27Z"
            }
        ]
    },
    {
        "task_name": "Группировка пользователей по возрасту",
        "url": "https://github.com/CorporationX/god_bless/pull/11045",
        "content": [
            {
                "filename": "src/main/java/school/faang/group_user_by_age/Main.java",
                "content": "+package school.faang.group_user_by_age;\n+\n+import java.util.List;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+\n+        var users = List.of(\n+                new User(\"Sam\", 18, \"Google\", \"Washington DC\"),\n+                new User(\"Ban\", 21, \"Amazon\", \"Miami\"),\n+                new User(\"Keanu\", 18, \"Netflix\", \"California\"),\n+                new User(\"John\", 40, \"Microsoft\", \"Texas\")\n+        );\n+\n+        System.out.println(User.groupUser(users, 18));\n+    }\n+}"
            },
            {
                "filename": "src/main/java/school/faang/group_user_by_age/User.java",
                "content": "+package school.faang.group_user_by_age;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Data\n+@AllArgsConstructor\n+public class User {\n+    private final String name;\n+    private int age;\n+    private String company;\n+    private String address;\n+\n+    static Map<Integer, List<User>> groupUser(List<User> users, int age) {\n+        return Map.of(age, users.stream()\n+                .filter(user -> user.getAge() == age).toList());\n+    }\n+}"
            }
        ],
        "comments": [
            {
                "file": "src/main/java/school/faang/group_user_by_age/User.java",
                "code": "@@ -0,0 +1,21 @@\n+package school.faang.group_user_by_age;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Data\n+@AllArgsConstructor\n+public class User {\n+    private final String name;\n+    private int age;\n+    private String company;\n+    private String address;\n+\n+    static Map<Integer, List<User>> groupUser(List<User> users, int age) {\n+        return Map.of(age, users.stream()\n+                .filter(user -> user.getAge() == age).toList());\n+    }",
                "suggestion": "Метод Map.of создаст не изменяемую коллекцию. В дальнейшем нельзя будет добавить новые записи",
                "lines": [
                    17,
                    20
                ],
                "date": "2024-10-03T12:17:20Z"
            },
            {
                "file": "src/main/java/school/faang/group_user_by_age/User.java",
                "code": "@@ -0,0 +1,21 @@\n+package school.faang.group_user_by_age;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Data\n+@AllArgsConstructor\n+public class User {\n+    private final String name;\n+    private int age;\n+    private String company;\n+    private String address;\n+\n+    static Map<Integer, List<User>> groupUser(List<User> users, int age) {\n+        return Map.of(age, users.stream()\n+                .filter(user -> user.getAge() == age).toList());\n+    }",
                "suggestion": "И в вашем случае в Map будет только одна запись, в то время как мы хотим сгруппировать всех пользователей по возрастам",
                "lines": [
                    17,
                    20
                ],
                "date": "2024-10-03T12:17:20Z"
            },
            {
                "file": "src/main/java/school/faang/group_user_by_age/User.java",
                "code": "@@ -0,0 +1,21 @@\n+package school.faang.group_user_by_age;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Data\n+@AllArgsConstructor\n+public class User {\n+    private final String name;\n+    private int age;\n+    private String company;\n+    private String address;\n+\n+    static Map<Integer, List<User>> groupUser(List<User> users, int age) {\n+        return Map.of(age, users.stream()\n+                .filter(user -> user.getAge() == age).toList());\n+    }",
                "suggestion": "В данном методе нужен только один аргумент List\\<User>, а второй аргумент передавать не надо",
                "lines": [
                    17,
                    20
                ],
                "date": "2024-10-03T12:17:20Z"
            },
            {
                "file": "src/main/java/school/faang/group_user_by_age/User.java",
                "code": "@@ -0,0 +1,21 @@\n+package school.faang.group_user_by_age;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Data\n+@AllArgsConstructor\n+public class User {\n+    private final String name;\n+    private int age;\n+    private String company;\n+    private String address;\n+\n+    static Map<Integer, List<User>> groupUser(List<User> users, int age) {\n+        return Map.of(age, users.stream()\n+                .filter(user -> user.getAge() == age).toList());\n+    }",
                "suggestion": "По итогу в Map должны оказаться все пользователи, которые были переданы в первом аргументе",
                "lines": [
                    17,
                    20
                ],
                "date": "2024-10-03T12:17:20Z"
            }
        ]
    },
    {
        "task_name": "Группировка пользователей по возрасту",
        "url": "https://github.com/CorporationX/god_bless/pull/11009",
        "content": [
            {
                "filename": "src/main/java/school/faang/Main.java",
                "content": "+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+    public static void main(String[] args) {\n+        User Alexander = new User(\"Alexander\", 20, \"SNG\");\n+        User Timur = new User(\"Timur\", 25, \"Administration\");\n+        User Denis = new User(\"Denis\", 20, \"RosNeft\");\n+        User Kirill = new User(\"Kirill\", 24, \"SNG\");\n+        User Artur = new User(\"Artur\", 25, \"Administration\");\n+        User Artem = new User(\"Artem\", 24, \"SNG\");\n+        List<User> userList = List.of(Alexander,Timur, Denis, Kirill, Artur, Artem);\n+\n+        Map<Integer, List<User>> result = User.groupUsers(userList);\n+        System.out.println(result);\n+\n+    }"
            },
            {
                "filename": "src/main/java/school/faang/User.java",
                "content": "+package school.faang;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+import java.util.*;\n+\n+@AllArgsConstructor\n+@Data\n+public class User {\n+    private String name;\n+    private int age;\n+    private String job;\n+\n+    public static Map<Integer, List<User>> groupUsers (List<User> UsersList){\n+        Map<Integer, List<User>> groupedUsers = new HashMap<>();\n+\n+        for (int i = 0; i < UsersList.size(); i++) {\n+            List<User> TempList = new ArrayList<>();\n+\n+            for (int j = 0; j < UsersList.size(); j++) {\n+                if (Objects.equals(UsersList.get(i).getAge(), UsersList.get(j).getAge())){\n+                    TempList.add(UsersList.get(j));\n+                    groupedUsers.put(UsersList.get(i).getAge(), TempList);\n+                }\n+            }\n+        }\n+        return groupedUsers;\n+    }\n+\n+}"
            }
        ],
        "comments": [
            {
                "file": "src/main/java/school/faang/Main.java",
                "code": "@@ -1,4 +1,21 @@\n package school.faang;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n public class Main {\n+    public static void main(String[] args) {\n+        User Alexander = new User(\"Alexander\", 20, \"SNG\");\n+        User Timur = new User(\"Timur\", 25, \"Administration\");\n+        User Denis = new User(\"Denis\", 20, \"RosNeft\");\n+        User Kirill = new User(\"Kirill\", 24, \"SNG\");\n+        User Artur = new User(\"Artur\", 25, \"Administration\");\n+        User Artem = new User(\"Artem\", 24, \"SNG\");\n+        List<User> userList = List.of(Alexander,Timur, Denis, Kirill, Artur, Artem);",
                "suggestion": "Можно делать List.of и внутри метода через запятую создавать объекты коллекции. Таким образом у тебя не будет лишних переменных и не надо думать как назвать эти переменные",
                "lines": [
                    14,
                    15
                ],
                "date": "2024-10-03T09:43:31Z"
            },
            {
                "file": "src/main/java/school/faang/User.java",
                "code": "@@ -0,0 +1,31 @@\n+package school.faang;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+import java.util.*;\n+\n+@AllArgsConstructor\n+@Data\n+public class User {\n+    private String name;\n+    private int age;\n+    private String job;\n+\n+    public static Map<Integer, List<User>> groupUsers (List<User> UsersList){\n+        Map<Integer, List<User>> groupedUsers = new HashMap<>();\n+\n+        for (int i = 0; i < UsersList.size(); i++) {\n+            List<User> TempList = new ArrayList<>();",
                "suggestion": "имена переменных обязательно с маленькой буквы",
                "lines": [
                    16,
                    19
                ],
                "date": "2024-10-03T09:43:31Z"
            },
            {
                "file": "src/main/java/school/faang/User.java",
                "code": "@@ -0,0 +1,31 @@\n+package school.faang;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+import java.util.*;\n+\n+@AllArgsConstructor\n+@Data\n+public class User {\n+    private String name;\n+    private int age;\n+    private String job;\n+\n+    public static Map<Integer, List<User>> groupUsers (List<User> UsersList){",
                "suggestion": "имена переменных только с маленькой буквы",
                "lines": [
                    12,
                    15
                ],
                "date": "2024-10-03T09:43:31Z"
            },
            {
                "file": "src/main/java/school/faang/User.java",
                "code": "@@ -0,0 +1,31 @@\n+package school.faang;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+import java.util.*;\n+\n+@AllArgsConstructor\n+@Data\n+public class User {\n+    private String name;\n+    private int age;\n+    private String job;\n+\n+    public static Map<Integer, List<User>> groupUsers (List<User> UsersList){\n+        Map<Integer, List<User>> groupedUsers = new HashMap<>();\n+\n+        for (int i = 0; i < UsersList.size(); i++) {\n+            List<User> TempList = new ArrayList<>();\n+\n+            for (int j = 0; j < UsersList.size(); j++) {\n+                if (Objects.equals(UsersList.get(i).getAge(), UsersList.get(j).getAge())){",
                "suggestion": "В данной задаче второй цикл не нужен. У тебя есть Map и каждый элемент надо положить в него, просто сразу находить нужное место. Сравнивать элементы попарно между собой нет необходимости",
                "lines": [
                    21,
                    22
                ],
                "date": "2024-10-03T09:43:31Z"
            },
            {
                "file": "src/main/java/school/faang/User.java",
                "code": "@@ -0,0 +1,31 @@\n+package school.faang;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+import java.util.*;\n+\n+@AllArgsConstructor\n+@Data\n+public class User {\n+    private String name;\n+    private int age;\n+    private String job;\n+\n+    public static Map<Integer, List<User>> groupUsers (List<User> UsersList){\n+        Map<Integer, List<User>> groupedUsers = new HashMap<>();\n+\n+        for (int i = 0; i < UsersList.size(); i++) {\n+            List<User> TempList = new ArrayList<>();\n+\n+            for (int j = 0; j < UsersList.size(); j++) {\n+                if (Objects.equals(UsersList.get(i).getAge(), UsersList.get(j).getAge())){",
                "suggestion": "Попробуй использовать метод класса Map putIfAbsent или computeIfAbsent",
                "lines": [
                    21,
                    22
                ],
                "date": "2024-10-03T09:43:31Z"
            }
        ]
    },
    {
        "task_name": "Группировка пользователей по возрасту",
        "url": "https://github.com/CorporationX/god_bless/pull/10881",
        "content": [
            {
                "filename": "src/main/java/school/faang/User.java",
                "content": "+package school.faang;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Data\n+@AllArgsConstructor\n+public class User {\n+\n+    private String name;\n+\n+    private int age;\n+\n+    private String job;\n+\n+    private String address;\n+\n+    public static Map<Integer, List<User>> groupUsers(List<User> users) {\n+        Map<Integer, List<User>> ageToUserList = new HashMap<>();\n+        for (User user : users) {\n+            ageToUserList.computeIfAbsent(user.getAge(), k -> new ArrayList<>()).add(user);\n+        }\n+\n+        return ageToUserList;\n+    }\n+}"
            },
            {
                "filename": "src/main/java/school/faang/Main.java",
                "content": "+import java.util.List;\n+import java.util.Map;\n+\n+\n+    public static void main(String[] args) {\n+        User user1 = new User(\"Ivan\", 20, \"BestJob\", \"house 15\");\n+        User user2 = new User(\"Petr\", 20, \"CoolWork\", \"house 20\");\n+        User user3 = new User(\"Alex\", 21, \"FAANGSchool\", \"house 30\");\n+        List<User> users = List.of(user1, user2, user3);\n+\n+        for (Map.Entry<Integer, List<User>> entry : User.groupUsers(users).entrySet()) {\n+            System.out.println(\"age: \" + entry.getKey() + \"; users: \" + entry.getValue());\n+        }\n+    }"
            }
        ],
        "comments": [
            {
                "file": "src/main/java/school/faang/User.java",
                "code": "@@ -0,0 +1,31 @@\n+package school.faang;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Data\n+@AllArgsConstructor\n+public class User {\n+\n+    private String name;\n+\n+    private int age;\n+\n+    private String job;\n+\n+    private String address;",
                "suggestion": "Не нужно пропускать пустые строчки между полями класса. Это только усложняет чтение кода",
                "lines": [
                    15,
                    21
                ],
                "date": "2024-10-02T13:29:17Z"
            }
        ]
    },
    {
        "task_name": "Группировка пользователей по возрасту",
        "url": "https://github.com/CorporationX/god_bless/pull/8593",
        "content": [
            {
                "filename": "src/main/java/faang/school/godbless/BJS2_18565/User.java",
                "content": "+package faang.school.godbless.BJS2_18565;\n+\n+import lombok.AllArgsConstructor;\n+\n+import java.util.*;\n+\n+@AllArgsConstructor\n+public class User {\n+    private final String name;\n+    private final int age;\n+    private final String placeOfWork;\n+    private final String address;\n+\n+    public static Map<Integer, List<User>> groupUsers (List<User> users) {\n+        Map<Integer, List<User>> userMap = new HashMap<>();\n+        for (User user : users) {\n+            int userAge = user.age;\n+            if (userMap.containsKey(userAge)) {\n+                userMap.get(userAge).add(user);\n+            } else {\n+                userMap.put(userAge, new ArrayList<>(List.of(user)));\n+            }\n+        }\n+        return userMap;\n+    }\n+}"
            },
            {
                "filename": "src/test/java/faang/school/godbless/BJS2_18565/Constants.java",
                "content": "+package faang.school.godbless.BJS2_18565;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class Constants {\n+\n+    public static final User USER_1 = new User(\"Ivan\", 32, \"Place of work 1\", \"Address 1\");\n+    public static final User USER_2 = new User(\"Anna\", 23, \"Place of work 2\", \"Address 2\");\n+    public static final User USER_3 = new User(\"Maria\", 32, \"Place of work 3\", \"Address 3\");\n+    public static final User USER_4 = new User(\"Michael\", 44, \"Place of work 4\", \"Address 4\");\n+    public static final User USER_5 = new User(\"Irina\", 23, \"Place of work 5\", \"Address 5\");\n+\n+    public static final List<User> USER_LIST = List.of(USER_1, USER_2, USER_3, USER_4, USER_5);\n+\n+    public static Map<Integer, List<User>> CORRECT_USER_MAP = new HashMap<>() {{\n+       put(32, List.of(USER_1, USER_3));\n+       put(23, List.of(USER_2, USER_5));\n+       put(44, List.of(USER_4));\n+    }};\n+\n+    public static Map<Integer, List<User>> INCORRECT_USER_MAP = new HashMap<>() {{\n+        put(32, List.of(USER_1, USER_2, USER_3));\n+        put(23, List.of(USER_4, USER_5));\n+    }};\n+}"
            },
            {
                "filename": "src/test/java/faang/school/godbless/BJS2_18565/UserTest.java",
                "content": "+package faang.school.godbless.BJS2_18565;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static faang.school.godbless.BJS2_18565.Constants.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+\n+class UserTest {\n+\n+    private static final Map<Integer, List<User>> GROUP_USERS_RESULT = User.groupUsers(USER_LIST);\n+\n+    @Test\n+    public void testGroupUsersCorrect() {\n+        assertEquals(CORRECT_USER_MAP, GROUP_USERS_RESULT);\n+    }\n+\n+    @Test\n+    public void testGroupUsersIncorrect() {\n+        assertNotEquals(INCORRECT_USER_MAP, GROUP_USERS_RESULT);\n+    }\n+}"
            }
        ],
        "comments": [
            {
                "file": "src/main/java/faang/school/godbless/BJS2_18565/User.java",
                "code": "@@ -0,0 +1,26 @@\n+package faang.school.godbless.BJS2_18565;\n+\n+import lombok.AllArgsConstructor;\n+\n+import java.util.*;\n+\n+@AllArgsConstructor\n+public class User {\n+    private final String name;\n+    private final int age;\n+    private final String placeOfWork;\n+    private final String address;\n+\n+    public static Map<Integer, List<User>> groupUsers (List<User> users) {\n+        Map<Integer, List<User>> userMap = new HashMap<>();\n+        for (User user : users) {\n+            int userAge = user.age;",
                "suggestion": "Не обращайся к переменным напрямую. В рамках данной задачи я это пропущу, но в дальнейшем - всегда обращайся только через геттеры. Поля никогда не должны быть публичными, если того не требуют исключительные обстоятельства, и обращаться к ним только через геттеры.",
                "lines": [
                    14,
                    17
                ],
                "date": "2024-08-13T23:55:05Z"
            },
            {
                "file": "src/main/java/faang/school/godbless/BJS2_18565/User.java",
                "code": "@@ -0,0 +1,26 @@\n+package faang.school.godbless.BJS2_18565;\n+\n+import lombok.AllArgsConstructor;\n+\n+import java.util.*;\n+\n+@AllArgsConstructor\n+public class User {\n+    private final String name;\n+    private final int age;\n+    private final String placeOfWork;\n+    private final String address;\n+\n+    public static Map<Integer, List<User>> groupUsers (List<User> users) {\n+        Map<Integer, List<User>> userMap = new HashMap<>();\n+        for (User user : users) {\n+            int userAge = user.age;\n+            if (userMap.containsKey(userAge)) {\n+                userMap.get(userAge).add(user);\n+            } else {\n+                userMap.put(userAge, new ArrayList<>(List.of(user)));\n+            }",
                "suggestion": "Прочитай про computeIfAbsent",
                "lines": [
                    18,
                    22
                ],
                "date": "2024-08-13T23:55:05Z"
            },
            {
                "file": "src/main/java/faang/school/godbless/BJS2_18565/User.java",
                "code": "@@ -0,0 +1,26 @@\n+package faang.school.godbless.BJS2_18565;\n+\n+import lombok.AllArgsConstructor;\n+\n+import java.util.*;",
                "suggestion": "Никогда не импортируй всю либу, потому что у тебя подтягивается много компонентов, которые ты не используешь. Измени в настройках IDE, чтобы оно так не делало, там надо выставить, чтобы оно не импортило всю либу, пока из неё не сделают 99 импортов",
                "lines": [
                    2,
                    5
                ],
                "date": "2024-08-13T23:55:05Z"
            },
            {
                "filename": null,
                "code": null,
                "comment": "BJS2-18565 - Группировка пользователей по возрасту - вот так должен называться пулл-реквест.",
                "line_range": null,
                "date": "2024-08-13T23:53:06Z"
            }
        ]
    },
    {
        "task_name": "Группировка пользователей по возрасту",
        "url": "https://github.com/CorporationX/god_bless/pull/8491",
        "content": [
            {
                "filename": "src/main/java/faang/school/godbless/BJS218596/Solution.java",
                "content": "+package faang.school.godbless.BJS218596;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+public class Solution {\n+    public static void main(String[] args) {\n+        ArrayList<User> users = new ArrayList<>();\n+        users.add(new User(\"Dmitriy\", 26, \"Aston\", \"street 1\"));\n+        users.add(new User(\"Ivan\", 26, \"Sber\", \"street 2\"));\n+        users.add(new User(\"Oleg\", 18, \"Tinkoff\", \"street 3\"));\n+        users.add(new User(\"Pavel\", 19, \"Yandex\", \"street 4\"));\n+\n+        HashMap<Integer, ArrayList<User>> groupUsersAge = User.groupUsers(users);\n+        for (Integer key : groupUsersAge.keySet()) {\n+            ArrayList<User> value = groupUsersAge.get(key);\n+            System.out.println(key + \"-->\" + value);\n+        }\n+    }\n+}"
            },
            {
                "filename": "src/main/java/faang/school/godbless/BJS218596/User.java",
                "content": "+package faang.school.godbless.BJS218596;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+public class User {\n+    private String name;\n+    private Integer age;\n+    private String placeWork;\n+    private String address;\n+\n+    public User(String name, Integer age, String placeWork, String address) {\n+        this.name = name;\n+        this.age = age;\n+        this.placeWork = placeWork;\n+        this.address = address;\n+    }\n+\n+    public Integer getAge() {\n+        return age;\n+    }\n+\n+    public static HashMap<Integer, ArrayList<User>> groupUsers(ArrayList<User> users) {\n+        HashMap<Integer, ArrayList<User>> groupUsers = new HashMap<>();\n+        for (User user : users) {\n+            int age = user.getAge();\n+            if (groupUsers.containsKey(age)) {\n+                groupUsers.get(age).add(user);\n+            } else {\n+                groupUsers.put(age, new ArrayList<>());\n+            }\n+        }\n+        return groupUsers;\n+    }\n+}\n+"
            }
        ],
        "comments": [
            {
                "file": "src/main/java/faang/school/godbless/BJS218596/User.java",
                "code": "@@ -0,0 +1,36 @@\n+package faang.school.godbless.BJS218596;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+public class User {\n+    private String name;\n+    private Integer age;\n+    private String placeWork;\n+    private String address;",
                "suggestion": "final добавь и посмотри особенности модификатора этого",
                "lines": [
                    7,
                    10
                ],
                "date": "2024-08-08T22:40:48Z"
            },
            {
                "file": "src/main/java/faang/school/godbless/BJS218596/User.java",
                "code": "@@ -0,0 +1,36 @@\n+package faang.school.godbless.BJS218596;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+public class User {\n+    private String name;\n+    private Integer age;\n+    private String placeWork;\n+    private String address;\n+\n+    public User(String name, Integer age, String placeWork, String address) {\n+        this.name = name;\n+        this.age = age;\n+        this.placeWork = placeWork;\n+        this.address = address;\n+    }\n+\n+    public Integer getAge() {\n+        return age;\n+    }\n+\n+    public static HashMap<Integer, ArrayList<User>> groupUsers(ArrayList<User> users) {\n+        HashMap<Integer, ArrayList<User>> groupUsers = new HashMap<>();\n+        for (User user : users) {\n+            int age = user.getAge();\n+            if (groupUsers.containsKey(age)) {\n+                groupUsers.get(age).add(user);\n+            } else {\n+                groupUsers.put(age, new ArrayList<>());\n+            }\n+        }\n+        return groupUsers;",
                "suggestion": "неверная реализация\r\nпосмотри метод computeifabsent, тебе здесь подойдет хорошо, посмотри, что это за метод и попробуй применить",
                "lines": [
                    23,
                    33
                ],
                "date": "2024-08-08T22:40:48Z"
            },
            {
                "file": "src/main/java/faang/school/godbless/BJS218596/Solution.java",
                "code": "@@ -0,0 +1,20 @@\n+package faang.school.godbless.BJS218596;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+public class Solution {\n+    public static void main(String[] args) {\n+        ArrayList<User> users = new ArrayList<>();",
                "suggestion": "в юзере и тут у тебя используются реализации (мутабельные) интерфейсов - почему так?\r\n",
                "lines": [
                    5,
                    8
                ],
                "date": "2024-08-08T22:40:48Z"
            },
            {
                "file": "src/main/java/faang/school/godbless/BJS218596/Solution.java",
                "code": "@@ -0,0 +1,20 @@\n+package faang.school.godbless.BJS218596;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+public class Solution {\n+    public static void main(String[] args) {\n+        ArrayList<User> users = new ArrayList<>();\n+        users.add(new User(\"Dmitriy\", 26, \"Aston\", \"street 1\"));\n+        users.add(new User(\"Ivan\", 26, \"Sber\", \"street 2\"));\n+        users.add(new User(\"Oleg\", 18, \"Tinkoff\", \"street 3\"));\n+        users.add(new User(\"Pavel\", 19, \"Yandex\", \"street 4\"));\n+\n+        HashMap<Integer, ArrayList<User>> groupUsersAge = User.groupUsers(users);\n+        for (Integer key : groupUsersAge.keySet()) {\n+            ArrayList<User> value = groupUsersAge.get(key);\n+            System.out.println(key + \"-->\" + value);",
                "suggestion": "чтобы увидеть распечатанные данные, тебе необходимо переопределить toString\r\n",
                "lines": [
                    16,
                    19
                ],
                "date": "2024-08-08T22:40:48Z"
            },
            {
                "filename": null,
                "code": null,
                "comment": "> Правильно ли разделил файл с классом и решением? или надо вместе писать Lombok пока не использовал, решил сам пописать, попрактиковаться, но знаю что надо его использовать И думаю не правильно вывожу данные в консоль, как можно вывести всю информацию в консоль в данном случае? т.е группу и все данные по пользователю в данной группе\r\n\r\nпочти все верно сделал, комменты тебе оставила, в чем были ошибки\r\nпро ломбок поняла тебя, молодец, позже просто начнешь применять\r\nтак-то тебе и идея генерить может боллер код, а ломбок как раз придуман для того, чтобы спрятать это всё и прикладывать минимум усилий для генерации боллер кода\r\nруками пощупай на нескольких задачках буквально, как и хотел, написание такого кода и дальше применяй ломбок затем тогда\r\n\r\n\r\n",
                "line_range": null,
                "date": "2024-08-08T22:46:50Z"
            }
        ]
    },
    {
        "task_name": "Группировка пользователей по возрасту",
        "url": "https://github.com/CorporationX/god_bless/pull/8410",
        "content": [
            {
                "filename": "src/main/java/faang/school/godbless/Application.java",
                "content": "+import faang.school.godbless.group.Main;\n+\n+        Main.main(args);"
            },
            {
                "filename": "src/main/java/faang/school/godbless/group/Main.java",
                "content": "+package faang.school.godbless.group;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        List<User> users = new ArrayList<>(Arrays.asList(\n+                new User(\"1\", 1, \"1\", \"1\"),\n+                new User(\"2\", 1, \"2\", \"2\"),\n+                new User(\"3\", 2, \"3\", \"3\"),\n+                new User(\"4\", 2, \"4\", \"4\"),\n+                new User(\"5\", 3, \"5\", \"5\"),\n+                new User(\"6\", 3, \"6\", \"6\")\n+        ));\n+        Map<Integer, List<User>> map = User.groupUsers(users);//проверка через дебаг\n+    }\n+}"
            },
            {
                "filename": "src/main/java/faang/school/godbless/group/User.java",
                "content": "+package faang.school.godbless.group;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.NonNull;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@AllArgsConstructor\n+public class User {\n+    @NonNull private String name;\n+    @NonNull private Integer age;\n+    @NonNull private String workAddress;\n+    @NonNull private String homeAddress;\n+\n+    public static Map<Integer, List<User>> groupUsers(List<User> userList){\n+        var userMap = new HashMap<Integer, List<User>>();\n+        for (User user : userList){\n+            addUser(userMap, user);\n+        }\n+        return userMap;\n+    }\n+\n+    private static void addUser(Map<Integer, List<User>> userMap, User user){\n+        if(userMap.get(user.age) == null){\n+            userMap.put(user.age, new ArrayList<>());\n+        }\n+        userMap.get(user.age).add(user);\n+    }\n+}"
            }
        ],
        "comments": [
            {
                "filename": null,
                "code": null,
                "comment": "⚠️ **ОШЫБКА**: Ты создал PR в master ветку. PR-ы можно создавать только в СВОЮ ветку вида {имя_пользователя_discord}. Пожалуйста, нажми кнопку Edit вверху и измени ветку, в которую направляешь PR. После этого красная ошибка ниже должна пропасть, но этот комментарий останется - так и должно быть.",
                "line_range": null,
                "date": "2024-08-07T16:21:31Z"
            }
        ]
    },
    {
        "task_name": "Группировка пользователей по возрасту",
        "url": "https://github.com/CorporationX/god_bless/pull/7846",
        "content": [
            {
                "filename": "src/main/java/faang/school/godbless/grouping_users_by_age/Main.java",
                "content": "+package faang.school.godbless.grouping_users_by_age;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        List<User> users = new ArrayList<>(5);\n+        users.add(new User(\"John\", 20, \"Google\", \"London\"));\n+        users.add(new User(\"Jane\", 20, \"Uber\", \"Amsterdam\"));\n+        users.add(new User(\"Bob\", 30, \"Amazon\", \"New York\"));\n+        users.add(new User(\"Alice\", 30, \"Google\", \"Amsterdam\"));\n+        users.add(new User(\"Mike\", 17, \"Microsoft\", \"Chicago\"));\n+\n+        Map<Integer, List<User>> groupedUsers = User.groupUsers(users);\n+\n+        for (Map.Entry<Integer, List<User>> entry : groupedUsers.entrySet()) {\n+            System.out.println(\"Age: \" + entry.getKey());\n+            List<User> usersByAge = entry.getValue();\n+            for (User user : usersByAge) {\n+                System.out.println(\"Name: \" + user.getName());\n+                System.out.println(\"Place of Work: \" + user.getPlaceOfWork());\n+                System.out.println(\"Address: \" + user.getAddress());\n+                System.out.println();\n+            }\n+        }\n+    }\n+}"
            },
            {
                "filename": "src/main/java/faang/school/godbless/grouping_users_by_age/User.java",
                "content": "+package faang.school.godbless.grouping_users_by_age;\n+\n+\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Getter\n+@Setter\n+@AllArgsConstructor\n+public class User {\n+    private String name;\n+    private int age;\n+    private String placeOfWork;\n+    private String address;\n+\n+    public static Map<Integer, List<User>> groupUsers(List<User> users) {\n+        Map<Integer, List<User>> groupedUsers = new HashMap<>();\n+\n+        for (User user : users) {\n+            if (!groupedUsers.containsKey(user.getAge())) {\n+                List<User> usersByAge = new ArrayList<>();\n+                usersByAge.add(user);\n+                groupedUsers.put(user.getAge(), usersByAge);\n+            } else {\n+                groupedUsers.get(user.getAge()).add(user);\n+            }\n+        }\n+\n+        return groupedUsers;\n+    }\n+}"
            }
        ],
        "comments": [
            {
                "file": "src/main/java/faang/school/godbless/grouping_users_by_age/User.java",
                "code": "@@ -0,0 +1,39 @@\n+package faang.school.godbless.grouping_users_by_age;\n+\n+\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Getter\n+@Setter\n+@AllArgsConstructor\n+public class User {\n+    private String name;\n+    private int age;\n+    private String placeOfWork;\n+    private String address;\n+\n+    public static Map<Integer, List<User>> groupUsers(List<User> users) {\n+        Map<Integer, List<User>> groupedUsers = new HashMap<>();\n+\n+        for (User user : users) {\n+            if (!groupedUsers.containsKey(user.getAge())) {",
                "suggestion": "! - этот знак плохо читается. Поэтому удобнее изменить if, так, чтобы в нем не было НЕ",
                "lines": [
                    25,
                    28
                ],
                "date": "2024-08-05T10:06:12Z"
            }
        ]
    },
    {
        "task_name": "Группировка пользователей по возрасту",
        "url": "https://github.com/CorporationX/god_bless/pull/6192",
        "content": [
            {
                "filename": "src/main/java/faang/school/godbless/Kate/BJS2_7540_7844/App7540.java",
                "content": "+package faang.school.godbless.Kate.BJS2_7540_7844;\n+\n+public class App7540 {\n+// проверка кода\n+    public static void main(String[] args) {\n+        User user01 = new User(\"Alice\", 25, \"Google\", \"London\");\n+        User user02 = new User(\"Piter\", 25, \"Uber\", \"NY\");\n+        User user03 = new User(\"Chris\", 30, \"Amazon\", \"Amsterdam\");\n+        User user04 = new User(\"Ben\", 30, \"Amazon\", \"Amsterdam\");\n+        User user05 = new User(\"\", 25, \"Amazon\", \"Amsterdam\");\n+        User user06 = new User(\"Greg\", 15, \"Amazon\", \"Amsterdam\");\n+        User user07 = new User(\"Ann\", 28, \"Amazon\", \"Amsterdam\");\n+        User user08 = new User(\"Ann\", 28, \"Ozon\", \"Moscow\");\n+\n+        System.out.println(User.users.toString());\n+        System.out.println(User.groupUsers(User.users).toString());\n+       //\n+    }\n+}"
            },
            {
                "filename": "src/main/java/faang/school/godbless/Kate/BJS2_7540_7844/User.java",
                "content": "+package faang.school.godbless.Kate.BJS2_7540_7844;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class User {\n+    private String name;\n+    private int age;\n+    private String job;\n+    private String address;\n+\n+    private Set<String> VALID_JOBS = new HashSet<>(Arrays.asList(\"Google\", \"Uber\", \"Amazon\"));\n+\n+    private Set<String> VALID_ADDRESSES = new HashSet<>(Arrays.asList(\"London\", \"NY\", \"Amsterdam\"));\n+\n+    public static ArrayList<User> users = new ArrayList<>();\n+\n+    public User(String name, int age, String job, String address) {\n+        try {\n+            if (name.isEmpty() || age<18 || !(VALID_JOBS.contains(job)) ||\n+                    !(VALID_ADDRESSES.contains(address))) {\n+                System.out.println(\"ошибка ввода\");\n+                throw new IllegalArgumentException();\n+            }\n+            this.name = name;\n+            this.age = age;\n+            this.job = job;\n+            this.address = address;\n+            users.add(this);\n+        }  catch (IllegalArgumentException e) {\n+        return;\n+    }\n+    }\n+\n+    public int getAge() {\n+        return age;\n+    }\n+\n+    public static HashMap<Integer, ArrayList<User>> groupUsers(ArrayList<User> users) {\n+        int k;\n+        HashMap<Integer, ArrayList<User>> sort = new HashMap<>();\n+        for (User user : users) {\n+            k = user.getAge();\n+            ArrayList<User> group = new ArrayList<>();\n+            if (sort.containsKey(k)) {\n+                sort.get(k).add(user);\n+            } else {\n+                group.add(user);\n+                sort.put(k, group);\n+            }\n+        }\n+        return sort;\n+    }\n+\n+}\n+\n+\n+\n+\n+\n+"
            }
        ],
        "comments": [
            {
                "file": "src/main/java/faang/school/godbless/Kate/BJS2_7540_7844/User.java",
                "code": "@@ -0,0 +1,64 @@\n+package faang.school.godbless.Kate.BJS2_7540_7844;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class User {\n+    private String name;\n+    private int age;\n+    private String job;\n+    private String address;\n+\n+    private Set<String> VALID_JOBS = new HashSet<>(Arrays.asList(\"Google\", \"Uber\", \"Amazon\"));\n+\n+    private Set<String> VALID_ADDRESSES = new HashSet<>(Arrays.asList(\"London\", \"NY\", \"Amsterdam\"));\n+\n+    public static ArrayList<User> users = new ArrayList<>();\n+\n+    public User(String name, int age, String job, String address) {\n+        try {\n+            if (name.isEmpty() || age<18 || !(VALID_JOBS.contains(job)) ||",
                "suggestion": "Для каждой проверки нужно кидать отдельный эксепшен, с сообщением - что именно пошло не так. Так как сейчас у тебя метод будет падать, а почему - непонятно. Исправь это.",
                "lines": [
                    20,
                    23
                ],
                "date": "2024-06-07T23:49:15Z"
            }
        ]
    },
    {
        "task_name": "Meta-вселенная?",
        "url": "https://github.com/CorporationX/god_bless/pull/12393",
        "content": [
            {
                "filename": "src/main/java/school/faang/bjs2_34844/Main.java",
                "content": "+package school.faang.bjs2_34844;\n+\n+import school.faang.bjs2_34844.service.Notification;\n+import school.faang.bjs2_34844.service.NotificationManager;\n+import school.faang.bjs2_34844.service.TypeNotification;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        NotificationManager notificationManager = new NotificationManager();\n+\n+        notificationManager.registerHandler(TypeNotification.PUSH,\n+                notification -> System.out.println(TypeNotification.PUSH.getActionMessage() + notification.getMessage()));\n+        notificationManager.registerHandler(TypeNotification.EMAIL,\n+                notification -> System.out.println(TypeNotification.EMAIL.getActionMessage() + notification.getMessage()));\n+        notificationManager.registerHandler(TypeNotification.SMS,\n+                notification -> System.out.println(TypeNotification.SMS.getActionMessage() + notification.getMessage()));\n+\n+        Notification emailNotification = new Notification(TypeNotification.EMAIL, \"Your order has been successfully placed\");\n+        Notification smsNotification = new Notification(TypeNotification.SMS, \"Your verification code is: 1234\");\n+        Notification pushNotification = new Notification(TypeNotification.PUSH, \"You have a new comment from user: JaneDoe\");\n+\n+        notificationManager.sendNotification(emailNotification);\n+        notificationManager.sendNotification(smsNotification);\n+        notificationManager.sendNotification(pushNotification);\n+\n+    }\n+}"
            },
            {
                "filename": "src/main/java/school/faang/bjs2_34844/service/ErrMessageValidate.java",
                "content": "+package school.faang.bjs2_34844.service;\n+\n+public enum ErrMessageValidate {\n+    TYPE_NOTIFICATION_IS_NULL,\n+    HANDLER_IS_NULL,\n+    NOTIFICATION_IS_NULL\n+}"
            },
            {
                "filename": "src/main/java/school/faang/bjs2_34844/service/Notification.java",
                "content": "+package school.faang.bjs2_34844.service;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@AllArgsConstructor\n+@Getter\n+@Setter\n+@ToString\n+public class Notification {\n+    private TypeNotification type;\n+    private String message;\n+\n+}"
            },
            {
                "filename": "src/main/java/school/faang/bjs2_34844/service/NotificationManager.java",
                "content": "+package school.faang.bjs2_34844.service;\n+\n+import lombok.Getter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+@Getter\n+public class NotificationManager {\n+    private final Map<TypeNotification, Consumer<Notification>> notificationIDsWithTheirHandlers = new HashMap<>();\n+    private final ValidatorNotificationManager validator = new ValidatorNotificationManager();\n+\n+    public void registerHandler(TypeNotification typeNotification, Consumer<Notification> handler) {\n+        validator.validateRegisterHandler(typeNotification, handler);\n+        notificationIDsWithTheirHandlers.put(typeNotification, handler);\n+    }\n+\n+    public void sendNotification(Notification notification) {\n+        validator.validateSendNotification(notification);\n+        TypeNotification typeNotification = notification.getType();\n+\n+        Consumer<Notification> handler = notificationIDsWithTheirHandlers.get(typeNotification);\n+        handler.accept(notification);\n+    }\n+\n+\n+}"
            },
            {
                "filename": "src/main/java/school/faang/bjs2_34844/service/TypeNotification.java",
                "content": "+package school.faang.bjs2_34844.service;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+@AllArgsConstructor\n+@Getter\n+public enum TypeNotification {\n+    EMAIL(\"Sending by email: \"),\n+    SMS(\"Sending SMS: \"),\n+    PUSH(\"Отправка push-уведомления: \");\n+\n+    private final String actionMessage;\n+}"
            },
            {
                "filename": "src/main/java/school/faang/bjs2_34844/service/ValidatorNotificationManager.java",
                "content": "+package school.faang.bjs2_34844.service;\n+\n+import java.util.NoSuchElementException;\n+import java.util.function.Consumer;\n+\n+public class ValidatorNotificationManager {\n+     void validateNotNull(Object object, ErrMessageValidate errMessage) {\n+        if (object == null) {\n+            throw new IllegalArgumentException(errMessage.name());\n+        }\n+    }\n+\n+     void validateRegisterHandler(TypeNotification typeNotification, Consumer<Notification> handler) {\n+        validateNotNull(typeNotification, ErrMessageValidate.TYPE_NOTIFICATION_IS_NULL);\n+        validateNotNull(handler, ErrMessageValidate.HANDLER_IS_NULL);\n+    }\n+\n+     void validateSendNotification(Notification notification) {\n+        validateNotNull(notification, ErrMessageValidate.NOTIFICATION_IS_NULL);\n+\n+        TypeNotification typeNotification = notification.getType();\n+        if (typeNotification == null) {\n+            throw new NoSuchElementException(ErrMessageValidate.TYPE_NOTIFICATION_IS_NULL.name());\n+        }\n+    }\n+}"
            },
            {
                "filename": "src/test/java/school/faang/bjs2_34844/service/NotificationManagerTest.java",
                "content": "+package school.faang.bjs2_34844.service;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class NotificationManagerTest {\n+    private final NotificationManager notificationManager = new NotificationManager();\n+\n+    @Test\n+    void registerHandler() {\n+        TypeNotification push = TypeNotification.PUSH;\n+        Consumer<Notification> consumer = notification -> System.out.println(TypeNotification.PUSH.getActionMessage() + notification.getMessage());\n+\n+        IllegalArgumentException illegalArgumentExceptionTypeNull = assertThrows(IllegalArgumentException.class,\n+                () -> notificationManager.registerHandler(null, consumer));\n+        assertEquals(ErrMessageValidate.TYPE_NOTIFICATION_IS_NULL.name(), illegalArgumentExceptionTypeNull.getMessage());\n+\n+        IllegalArgumentException illegalArgumentExceptionHandlerNull = assertThrows(IllegalArgumentException.class,\n+                () -> notificationManager.registerHandler(push, null));\n+        assertEquals(ErrMessageValidate.HANDLER_IS_NULL.name(), illegalArgumentExceptionHandlerNull.getMessage());\n+\n+        notificationManager.registerHandler(push, consumer);\n+\n+        Map<TypeNotification, Consumer<Notification>> notificationIDsWithTheirHandlers = notificationManager.getNotificationIDsWithTheirHandlers();\n+        assertTrue(notificationIDsWithTheirHandlers.containsKey(push));\n+\n+        Consumer<Notification> consumerForMap = notificationIDsWithTheirHandlers.get(push);\n+        assertEquals(consumer, consumerForMap);\n+        notificationIDsWithTheirHandlers.clear();\n+    }\n+\n+    @Test\n+    void sendNotification() {\n+        IllegalArgumentException illegalArgumentException = assertThrows(IllegalArgumentException.class, () -> notificationManager.sendNotification(null));\n+        assertEquals(ErrMessageValidate.NOTIFICATION_IS_NULL.name(), illegalArgumentException.getMessage());\n+\n+        Notification notificationTypeNull = new Notification(null, \"Your order has been successfully placed\");\n+        NoSuchElementException noSuchElementException = assertThrows(NoSuchElementException.class, () -> notificationManager.sendNotification(notificationTypeNull));\n+        assertEquals(ErrMessageValidate.TYPE_NOTIFICATION_IS_NULL.name(), noSuchElementException.getMessage());\n+\n+\n+        TypeNotification typeNotificationForRegister = TypeNotification.EMAIL;\n+        String checkedString = \"Test\";\n+        Consumer<Notification> handlerForRegister = notification -> notification.setMessage(checkedString);\n+        notificationManager.registerHandler(typeNotificationForRegister, handlerForRegister);\n+\n+        Notification emailNotification = new Notification(TypeNotification.EMAIL, \"Your order has been successfully placed\");\n+        notificationManager.sendNotification(emailNotification);\n+        assertEquals(checkedString,emailNotification.getMessage());\n+\n+    }\n+}"
            }
        ],
        "comments": [
            {
                "file": "src/main/java/school/faang/bjs2_34844/service/ErrMessageValidate.java",
                "code": "@@ -0,0 +1,7 @@\n+package school.faang.bjs2_34844.service;\n+\n+public enum ErrMessageValidate {\n+    TYPE_NOTIFICATION_IS_NULL,\n+    HANDLER_IS_NULL,\n+    NOTIFICATION_IS_NULL",
                "suggestion": "Давай эти лучше уберем. Когда этот enum разрастется в большом приложении, то в нем невозможно будет ориентироваться. Это не очень хорошая практика",
                "lines": [
                    3,
                    6
                ],
                "date": "2024-10-14T08:50:34Z"
            },
            {
                "file": "src/main/java/school/faang/bjs2_34844/service/ValidatorNotificationManager.java",
                "code": "@@ -0,0 +1,26 @@\n+package school.faang.bjs2_34844.service;\n+\n+import java.util.NoSuchElementException;\n+import java.util.function.Consumer;\n+\n+public class ValidatorNotificationManager {\n+     void validateNotNull(Object object, ErrMessageValidate errMessage) {",
                "suggestion": "Почему все методы default?",
                "lines": [
                    4,
                    7
                ],
                "date": "2024-10-14T08:50:34Z"
            }
        ]
    },
    {
        "task_name": "Meta-вселенная?",
        "url": "https://github.com/CorporationX/god_bless/pull/12364",
        "content": [
            {
                "filename": "src/main/java/school/faang/java/lambda/meta/Main.java",
                "content": "+package school.faang.java.lambda.meta;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Main {\n+    NotificationManager notificationManager = new NotificationManager();\n+    TranslationManager translationManager = new TranslationManager();\n+    List<Notification> notifications = new ArrayList<>();\n+\n+    public static void main(String[] args) {\n+\n+        Main main = new Main();\n+        main.addEmail();\n+        main.addSMS();\n+        main.addTranslateSMS();\n+        main.addTranslateEmail();\n+\n+        main.notifications.add(new Notification(\"SMS\", \"Test SMS 1\"));\n+        main.notifications.add(new Notification(\"Email\", \"Test Email 1\"));\n+\n+        System.out.println(\"=== Init version 1.0 ==== \");\n+        main.notifications.forEach(notification -> main.notificationManager.sendNotification(notification));\n+\n+        System.out.println(\"=== Extra version 2.1 ==== \");\n+        main.notifications.forEach(notification -> main.notificationManager.sendNotification(\n+                main.translationManager.translateMessage(notification)));\n+\n+        System.out.println(\"=== Extra version 2.2 ==== \");\n+        main.notifications.forEach(notification -> {\n+            Notification tempNotification = main.translationManager.translateMessage(notification);\n+            main.notificationManager.sendNotification(tempNotification);\n+        });\n+    }\n+\n+    public void addSMS() {\n+        notificationManager.registerHandler(\"SMS\",\n+                notification -> System.out.printf(\"\\nSend a message type SMS: %s --> Text: %s\",\n+                        notification.getType(),\n+                        notification.getMessage()));\n+    }\n+\n+    public void addEmail() {\n+        notificationManager.registerHandler(\"Email\",\n+                notification1 -> System.out.printf(\"\\nSend a message type Email: %s --> Text: %s\",\n+                        notification1.getType(),\n+                        notification1.getMessage()));\n+    }\n+\n+    public void addTranslateSMS() {\n+        translationManager.registerTranslatorFunctionMap(\"SMS\",\n+                notification -> new Notification(notification.getType(),\n+                        \"== Translated SMS ==\" + notification.getMessage()));\n+    }\n+\n+    public void addTranslateEmail() {\n+        translationManager.registerTranslatorFunctionMap(\"Email\",\n+                notification -> new Notification(notification.getType(),\n+                        \"== Translated Email ==\" + notification.getMessage()));\n+    }\n+}"
            },
            {
                "filename": "src/main/java/school/faang/java/lambda/meta/Notification.java",
                "content": "+package school.faang.java.lambda.meta;\n+\n+import lombok.Data;\n+\n+@Data\n+public class Notification {\n+    private final String type;\n+    private final String message;\n+}"
            },
            {
                "filename": "src/main/java/school/faang/java/lambda/meta/NotificationManager.java",
                "content": "+package school.faang.java.lambda.meta;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+public class NotificationManager {\n+    private final Map<String, Consumer<Notification>> notificationConsumerMap;\n+\n+    {\n+        notificationConsumerMap = new HashMap<>();\n+    }\n+\n+    public void registerHandler(String type, Consumer<Notification> notificationConsumer) {\n+        notificationConsumerMap.put(type, notificationConsumer);\n+    }\n+\n+    public void sendNotification(Notification notification) {\n+        notificationConsumerMap.get(notification.getType()).accept(notification);\n+    }\n+}"
            }
        ],
        "comments": [
            {
                "file": "src/main/java/school/faang/java/lambda/meta/NotificationManager.java",
                "code": "@@ -0,0 +1,21 @@\n+package school.faang.java.lambda.meta;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+public class NotificationManager {\n+    private final Map<String, Consumer<Notification>> notificationConsumerMap;\n+\n+    {",
                "suggestion": "Зачем нам этот блок, если мы можем прям в поле сразу добавить значение? Объем кода станет меньше",
                "lines": [
                    7,
                    10
                ],
                "date": "2024-10-14T08:47:44Z"
            }
        ]
    },
    {
        "task_name": "Meta-вселенная?",
        "url": "https://github.com/CorporationX/god_bless/pull/12133",
        "content": [
            {
                "filename": "src/main/java/school/faang/BJS2_34767/Main.java",
                "content": "+package school.faang.BJS2_34767;\n+\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        NotificationManager notificationManager = new NotificationManager();\n+\n+        notificationManager.registerHandler(NotificationType.EMAIL,\n+                (notification) -> System.out.println(\"Отправка по электронной почте: \" + notification.getMessage())\n+        );\n+\n+        notificationManager.registerHandler(NotificationType.SMS,\n+                (notification) -> System.out.println(\"Отправка SMS: \" + notification.getMessage())\n+        );\n+\n+        notificationManager.registerHandler(NotificationType.PUSH,\n+                (notification) -> System.out.println(\"Отправка push-уведомления: \" + notification.getMessage())\n+        );\n+\n+        Notification emailNotification = new Notification(NotificationType.EMAIL, \"Ваша учетная запись успешно активирована\");\n+        Notification emailNotificationWithForbiddenWord =\n+                new Notification(NotificationType.EMAIL, \"дурак , глупый и еще раз дурак\");\n+        Notification smsNotification = new Notification(NotificationType.SMS, \"Вы успешно изменили свой пароль\");\n+        Notification pushNotification = new Notification(NotificationType.PUSH, \"Новый пост от пользователя: JohnDoe\");\n+\n+        notificationManager.sendNotification(emailNotification);\n+        notificationManager.sendNotification(smsNotification);\n+        notificationManager.sendNotification(pushNotification);\n+        notificationManager.sendNotification(emailNotificationWithForbiddenWord);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/school/faang/BJS2_34767/Notification.java",
                "content": "+package school.faang.BJS2_34767;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+@AllArgsConstructor\n+@Data\n+public class Notification {\n+    private NotificationType type;\n+    private String message;\n+}"
            },
            {
                "filename": "src/main/java/school/faang/BJS2_34767/NotificationManager.java",
                "content": "+package school.faang.BJS2_34767;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+public class NotificationManager {\n+    private static final Map<NotificationType, Consumer<Notification>> NOTIFICATION_HANDLER = new HashMap<>();\n+    private static final Set<String> FORBIDDEN_WORDS = Set.of(\"Дурак\", \"Глупый\", \"Толстый\", \"Плохой\");\n+    private static final String ALLOWED_WORD = \"Учиться\";\n+\n+    void registerHandler(NotificationType type, Consumer<Notification> handler) {\n+        if (validate(type, handler)) {\n+            NOTIFICATION_HANDLER.put(type, handler);\n+        } else {\n+            System.out.println(\"Проверьте входные данные!\");\n+        }\n+    }\n+\n+    void sendNotification(Notification notification) {\n+        if (validate(notification)) {\n+            checkNotificationMassage(notification);\n+\n+            if (NOTIFICATION_HANDLER.containsKey(notification.getType())) {\n+                NOTIFICATION_HANDLER.get(notification.getType()).accept(notification);\n+            }\n+        } else {\n+            System.out.println(\"Проверьте входные данные!\");\n+        }\n+    }\n+\n+    private void checkNotificationMassage(Notification notification) {\n+        FORBIDDEN_WORDS.forEach((word) -> {\n+            if (notification.getMessage().toLowerCase().contains(word.toLowerCase())) {\n+                notification.setMessage(notification.getMessage().replace(word.toLowerCase(), ALLOWED_WORD));\n+            }\n+        });\n+    }\n+\n+    private boolean validate(Notification notification) {\n+        return Objects.nonNull(notification);\n+    }\n+\n+    private boolean validate(NotificationType notificationType) {\n+        return Objects.nonNull(notificationType);\n+    }\n+\n+    private boolean validate(NotificationType notificationType, Consumer<Notification> notificationHandler) {\n+        return validate(notificationType) && Objects.nonNull(notificationHandler);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/school/faang/BJS2_34767/NotificationType.java",
                "content": "+package school.faang.BJS2_34767;\n+\n+public enum NotificationType {\n+    SMS, EMAIL, PUSH\n+}"
            }
        ],
        "comments": [
            {
                "file": "src/main/java/school/faang/BJS2_34767/NotificationManager.java",
                "code": "@@ -0,0 +1,53 @@\n+package school.faang.BJS2_34767;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+public class NotificationManager {\n+    private static final Map<NotificationType, Consumer<Notification>> NOTIFICATION_HANDLER = new HashMap<>();",
                "suggestion": "Почему это static? Разве я не могу создать несколько менеджеров нотификаций с разными наборами обработчиков? По-моему, это просто поле должно быть",
                "lines": [
                    7,
                    10
                ],
                "date": "2024-10-12T04:22:28Z"
            },
            {
                "file": "src/main/java/school/faang/BJS2_34767/NotificationManager.java",
                "code": "@@ -0,0 +1,53 @@\n+package school.faang.BJS2_34767;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+public class NotificationManager {\n+    private static final Map<NotificationType, Consumer<Notification>> NOTIFICATION_HANDLER = new HashMap<>();\n+    private static final Set<String> FORBIDDEN_WORDS = Set.of(\"Дурак\", \"Глупый\", \"Толстый\", \"Плохой\");\n+    private static final String ALLOWED_WORD = \"Учиться\";\n+\n+    void registerHandler(NotificationType type, Consumer<Notification> handler) {",
                "suggestion": "Почему методы имеют default модификатор? Это публичный API этого класса. Почему он доступен только в пределах пакета?",
                "lines": [
                    11,
                    14
                ],
                "date": "2024-10-12T04:22:28Z"
            }
        ]
    },
    {
        "task_name": "Meta-вселенная?",
        "url": "https://github.com/CorporationX/god_bless/pull/11887",
        "content": [
            {
                "filename": "src/main/java/school/faang_sprint_2/meta_universe/Main.java",
                "content": "+package school.faang_sprint_2.meta_universe;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+\n+        NotificationManager notificationManager = new NotificationManager();\n+\n+        notificationManager.registerHandler(\"email\",\n+                notification -> System.out.println(\"Send by email:\" + notification.message()));\n+        notificationManager.registerHandler(\"sms\",\n+                notification -> System.out.println(\"Send by SMS: \" + notification.message()));\n+        notificationManager.registerHandler(\"push\",\n+                notification -> System.out.println(\"Send push-notifications: \" + notification.message()));\n+\n+        Notification emailNotification = new Notification(\"email\", \"Your account successfully activated\");\n+        Notification smsNotification = new Notification(\"sms\", \"Password successfully changed\");\n+        Notification pushNotification = new Notification(\"push\", \"New post from user: JohnDoe\");\n+\n+        notificationManager.sendNotification(emailNotification);\n+        notificationManager.sendNotification(smsNotification);\n+        notificationManager.sendNotification(pushNotification);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/school/faang_sprint_2/meta_universe/Notification.java",
                "content": "+package school.faang_sprint_2.meta_universe;\n+\n+public record Notification(String type, String message) {\n+\n+}"
            },
            {
                "filename": "src/main/java/school/faang_sprint_2/meta_universe/NotificationManager.java",
                "content": "+package school.faang_sprint_2.meta_universe;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+public class NotificationManager {\n+\n+    Map<String, Consumer<Notification>> notifications = new HashMap<>();\n+\n+    public void registerHandler(String identifier, Consumer<Notification> consumer) {\n+        notifications.put(identifier, consumer);\n+    }\n+\n+    public void sendNotification(Notification notification) {\n+        notifications.get(notification.type()).accept(notification);\n+    }\n+}"
            }
        ],
        "comments": [
            {
                "file": "src/main/java/school/faang_sprint_2/meta_universe/NotificationManager.java",
                "code": "@@ -0,0 +1,18 @@\n+package school.faang_sprint_2.meta_universe;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+public class NotificationManager {\n+\n+    Map<String, Consumer<Notification>> notifications = new HashMap<>();",
                "suggestion": "Нет модификатора доступа",
                "lines": [
                    6,
                    9
                ],
                "date": "2024-10-11T18:11:32Z"
            }
        ]
    },
    {
        "task_name": "Meta-вселенная?",
        "url": "https://github.com/CorporationX/god_bless/pull/11752",
        "content": [
            {
                "filename": "src/main/java/bjs2_33401/Main.java",
                "content": "+package bjs2_33401;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        NotificationManager notificationManager = new NotificationManager();\n+\n+        notificationManager.registerHandler(\"Telegram\", (notification) ->\n+                System.out.println(\"You received a new message: \" + notification.getMessage()));\n+        notificationManager.registerHandler(\"email\", (notification) ->\n+                System.out.println(\"You received a new email: \" + notification.getMessage()));\n+\n+        Notification telegramNotification = new Notification(\"Telegram\", \"Message from Java magics\");\n+        Notification emailNotification = new Notification(\"email\", \"You have been recruited by Spotify\");\n+        Notification badNotification = new Notification(\"Telegram\", \"My friend loves to drink alcohol. \" +\n+                \"He once got his driver license suspended for driving while being drunk. He regrets it till now\");\n+\n+        notificationManager.sendNotification(telegramNotification);\n+        notificationManager.sendNotification(emailNotification);\n+        notificationManager.sendNotification(badNotification);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/bjs2_33401/Notification.java",
                "content": "+package bjs2_33401;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+@AllArgsConstructor\n+public class Notification {\n+    private String type;\n+    private String message;\n+}"
            },
            {
                "filename": "src/main/java/bjs2_33401/NotificationManager.java",
                "content": "+package bjs2_33401;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+public class NotificationManager {\n+    public static Map<String, Consumer<Notification>> notificationTypeResponse = new HashMap<>();\n+    public static Set<String> unacceptableWords = Set.of(\"drugs\", \"alcohol\");\n+\n+    public void registerHandler(String type, Consumer<Notification> consumer) {\n+        notificationTypeResponse.put(type, consumer);\n+    }\n+\n+    public void sendNotification(Notification notification) {\n+        preprocessNotificationMessage(notification, 20);\n+        notificationTypeResponse.get(notification.getType()).accept(notification);\n+    }\n+\n+    public void preprocessNotificationMessage(Notification notification, int maxWords) {\n+        if (isLongMessage(notification, maxWords)) {\n+            shortenNotificationMessage(notification, maxWords);\n+        }\n+        blurUnacceptableWords(notification);\n+    }\n+\n+    public boolean isLongMessage(Notification notification, int maxWords) {\n+        return notification.getMessage().split(\" \").length > maxWords;\n+    }\n+\n+    // Логика в том, что в реальном мире в самих уведомлениях не бывает\n+    // очень длинных оповещений. Обычно ограничиваются 1-4 строчками.\n+    public void shortenNotificationMessage(Notification notification, int maxWords) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        String[] messageWords = notification.getMessage().split(\" \");\n+\n+        for (int i = 0; i < maxWords; i++) {\n+            stringBuilder.append(messageWords[i]).append(\" \");\n+        }\n+        notification.setMessage(stringBuilder.toString().trim());\n+    }\n+\n+    public void blurUnacceptableWords(Notification notification) {\n+        String message = notification.getMessage();\n+\n+        for (String word : unacceptableWords) {\n+            // меняем слова без учета регистра\n+            message = message.replaceAll(\"(?i)\" + word, \"***\");\n+        }\n+        notification.setMessage(message);\n+    }\n+}"
            }
        ],
        "comments": [
            {
                "file": "src/main/java/bjs2_33401/NotificationManager.java",
                "code": "@@ -0,0 +1,53 @@\n+package bjs2_33401;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+public class NotificationManager {\n+    public static Map<String, Consumer<Notification>> notificationTypeResponse = new HashMap<>();\n+    public static Set<String> unacceptableWords = Set.of(\"drugs\", \"alcohol\");",
                "suggestion": "Выглядит так, что это константа общая для всех объектов. Тогда final и большими буквами",
                "lines": [
                    7,
                    10
                ],
                "date": "2024-10-10T19:53:16Z"
            },
            {
                "file": "src/main/java/bjs2_33401/NotificationManager.java",
                "code": "@@ -0,0 +1,53 @@\n+package bjs2_33401;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+public class NotificationManager {\n+    public static Map<String, Consumer<Notification>> notificationTypeResponse = new HashMap<>();",
                "suggestion": "А почему я не могу создать несколько объектов NotificationManager с разными наборами обработчиков? Зачем тут static?\r\n\r\nПоле называется вообще не сообразно тому, что в этой мапе хранится. \"Тип ответа нотификаций\". Разве в мапе это лежит?",
                "lines": [
                    6,
                    9
                ],
                "date": "2024-10-10T19:53:16Z"
            },
            {
                "file": "src/main/java/bjs2_33401/NotificationManager.java",
                "code": "@@ -0,0 +1,53 @@\n+package bjs2_33401;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+public class NotificationManager {\n+    public static Map<String, Consumer<Notification>> notificationTypeResponse = new HashMap<>();\n+    public static Set<String> unacceptableWords = Set.of(\"drugs\", \"alcohol\");\n+\n+    public void registerHandler(String type, Consumer<Notification> consumer) {\n+        notificationTypeResponse.put(type, consumer);\n+    }\n+\n+    public void sendNotification(Notification notification) {\n+        preprocessNotificationMessage(notification, 20);\n+        notificationTypeResponse.get(notification.getType()).accept(notification);\n+    }\n+\n+    public void preprocessNotificationMessage(Notification notification, int maxWords) {\n+        if (isLongMessage(notification, maxWords)) {\n+            shortenNotificationMessage(notification, maxWords);\n+        }\n+        blurUnacceptableWords(notification);\n+    }\n+\n+    public boolean isLongMessage(Notification notification, int maxWords) {\n+        return notification.getMessage().split(\" \").length > maxWords;\n+    }\n+\n+    // Логика в том, что в реальном мире в самих уведомлениях не бывает\n+    // очень длинных оповещений. Обычно ограничиваются 1-4 строчками.\n+    public void shortenNotificationMessage(Notification notification, int maxWords) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        String[] messageWords = notification.getMessage().split(\" \");\n+\n+        for (int i = 0; i < maxWords; i++) {\n+            stringBuilder.append(messageWords[i]).append(\" \");\n+        }\n+        notification.setMessage(stringBuilder.toString().trim());\n+    }\n+\n+    public void blurUnacceptableWords(Notification notification) {\n+        String message = notification.getMessage();\n+\n+        for (String word : unacceptableWords) {\n+            // меняем слова без учета регистра\n+            message = message.replaceAll(\"(?i)\" + word, \"***\");\n+        }\n+        notification.setMessage(message);",
                "suggestion": "А мы не можем юзерам позволить тоже иметь мапу для таких вот фильтров, как и для обработчиков и добавлять туда лямбдами тоже любые, какие они захотят?\r\nИначе в этом классе эта логика зашита раз и навсегда - нельзя создать пользовательские проверки",
                "lines": [
                    57,
                    60
                ],
                "date": "2024-10-10T19:53:16Z"
            }
        ]
    },
    {
        "task_name": "Meta-вселенная?",
        "url": "https://github.com/CorporationX/god_bless/pull/11654",
        "content": [
            {
                "filename": "src/main/java/ru/kraiush/BJS2_34667/Main.java",
                "content": "+package ru.kraiush.BJS2_34667;\n+\n+import java.util.NoSuchElementException;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+        NotificationManager notificationManager = new NotificationManager();\n+\n+        notificationManager.registerHandler(\"email\",\n+                (notification -> System.out.println(\"Sending the email: \" + notification.getMessage())));\n+\n+        notificationManager.registerHandler(\"sms\",\n+                (notification -> System.out.println(\"Sending SMS: \" + notification.getMessage())));\n+\n+        notificationManager.registerHandler(\"push\",\n+                (notification -> System.out.println(\"Sending push-notification: \" + notification.getMessage())));\n+\n+        Notification emailNotification = new Notification(\"email\", \"Your email was successfully activated\");\n+        Notification smsNotification = new Notification(\"sms\", \"You have successfully changed your password\");\n+        Notification pushNotification = new Notification(\"push\", \"New post from: John Doe\");\n+        Notification callNotification = new Notification(\"call\", \"Your appointment was scheduled on October 10th\");\n+\n+        try {\n+            notificationManager.sendNotification(emailNotification);\n+            notificationManager.sendNotification(smsNotification);\n+            notificationManager.sendNotification(pushNotification);\n+            notificationManager.sendNotification(callNotification);\n+        } catch (NoSuchElementException e) {\n+            System.out.println(e.getMessage());\n+        }\n+    }\n+}"
            },
            {
                "filename": "src/main/java/ru/kraiush/BJS2_34667/Notification.java",
                "content": "+package ru.kraiush.BJS2_34667;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+@Data\n+@AllArgsConstructor\n+public class Notification {\n+    private String type;\n+    private String message;\n+}"
            },
            {
                "filename": "src/main/java/ru/kraiush/BJS2_34667/NotificationManager.java",
                "content": "+package ru.kraiush.BJS2_34667;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.function.Consumer;\n+\n+public class NotificationManager {\n+    private final Map<String, Consumer<Notification>> NOTIFICATIONS = new HashMap<>();\n+\n+    public void registerHandler(String notificationType, Consumer<Notification> consumer) {\n+        NOTIFICATIONS.put(notificationType, consumer);\n+    }\n+\n+    public void sendNotification(Notification notification) {\n+        if (!NOTIFICATIONS.containsKey(notification.getType())) {\n+            throw new NoSuchElementException(\"There is no notification type: \" + notification.getType());\n+        }\n+        NOTIFICATIONS.get(notification.getType()).accept(notification);\n+    }\n+}"
            }
        ],
        "comments": [
            {
                "file": "src/main/java/ru/kraiush/BJS2_34667/NotificationManager.java",
                "code": "@@ -0,0 +1,21 @@\n+package ru.kraiush.BJS2_34667;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.function.Consumer;\n+\n+public class NotificationManager {\n+    private final Map<String, Consumer<Notification>> NOTIFICATIONS = new HashMap<>();",
                "suggestion": "Большими буквами только static final. А это просто поле, поэтому notifications\r\nИ вообще: точно ли эта мапа хранит нотификации? Ведь она не их хранит, а мы всей нашей команде разработчиков говорим \"Тут нотификации лежат!\"\r\nНо это ведь обман...",
                "lines": [
                    6,
                    9
                ],
                "date": "2024-10-09T11:29:51Z"
            },
            {
                "file": "src/main/java/ru/kraiush/BJS2_34667/Main.java",
                "code": "@@ -0,0 +1,33 @@\n+package ru.kraiush.BJS2_34667;\n+\n+import java.util.NoSuchElementException;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+        NotificationManager notificationManager = new NotificationManager();\n+\n+        notificationManager.registerHandler(\"email\",\n+                (notification -> System.out.println(\"Sending the email: \" + notification.getMessage())));\n+\n+        notificationManager.registerHandler(\"sms\",\n+                (notification -> System.out.println(\"Sending SMS: \" + notification.getMessage())));\n+\n+        notificationManager.registerHandler(\"push\",\n+                (notification -> System.out.println(\"Sending push-notification: \" + notification.getMessage())));\n+\n+        Notification emailNotification = new Notification(\"email\", \"Your email was successfully activated\");\n+        Notification smsNotification = new Notification(\"sms\", \"You have successfully changed your password\");\n+        Notification pushNotification = new Notification(\"push\", \"New post from: John Doe\");\n+        Notification callNotification = new Notification(\"call\", \"Your appointment was scheduled on October 10th\");\n+\n+        try {\n+            notificationManager.sendNotification(emailNotification);\n+            notificationManager.sendNotification(smsNotification);\n+            notificationManager.sendNotification(pushNotification);\n+            notificationManager.sendNotification(callNotification);\n+        } catch (NoSuchElementException e) {\n+            System.out.println(e.getMessage());",
                "suggestion": "Всегда лучше печатать полное исключение с его стектрейсом, а не только message. Тогда в логах я смогу быстро понять, откуда именно такое исключение вылетело",
                "lines": [
                    27,
                    30
                ],
                "date": "2024-10-09T11:29:51Z"
            }
        ]
    },
    {
        "task_name": "Meta-вселенная?",
        "url": "https://github.com/CorporationX/god_bless/pull/11585",
        "content": [
            {
                "filename": "src/main/java/meta_universe/Main.java",
                "content": "+package meta_universe;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        Map<String, Consumer<Notification>> handlers = new HashMap<>();\n+\n+        NotificationManager notificationManager = new NotificationManager(handlers);\n+        notificationManager.registerHandler(\"sms\", notification -> {\n+            System.out.println(notification.getMessage());\n+        });\n+        notificationManager.registerHandler(\"email\", notification -> {\n+            System.out.println(notification.getMessage());\n+        });\n+\n+        notificationManager.sendNotification(new Notification(\"sms\", \"SMS: Hello\"));\n+        notificationManager.sendNotification(new Notification(\"email\", \"EMAIL: Dear user\"));\n+    }\n+}"
            },
            {
                "filename": "src/main/java/meta_universe/Notification.java",
                "content": "+package meta_universe;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+@Data\n+@AllArgsConstructor\n+public class Notification {\n+    private String type;\n+    private String message;\n+}"
            },
            {
                "filename": "src/main/java/meta_universe/NotificationManager.java",
                "content": "+package meta_universe;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+@Getter\n+@AllArgsConstructor\n+public class NotificationManager {\n+    private final Map<String, Consumer<Notification>> HANDLERS;\n+\n+    public void registerHandler(String notificationType, Consumer<Notification> handler) {\n+        HANDLERS.put(notificationType, handler);\n+    }\n+\n+    public void sendNotification(Notification notification) {\n+        HANDLERS.get(notification.getType()).accept(notification);\n+    }\n+}"
            },
            {
                "filename": "src/test/java/meta_universe/NotificationManagerTest.java",
                "content": "+package meta_universe;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import the_library_of_westeros.Book;\n+import the_library_of_westeros.Main;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class NotificationManagerTest {\n+    Map<String, Consumer<Notification>> handlers = new HashMap<>();\n+    NotificationManager notificationManager = new NotificationManager(handlers);\n+\n+    @BeforeEach\n+    void setUp() {\n+        notificationManager.registerHandler(\"email\", notification -> {\n+            System.out.println(notification.getMessage());\n+        });\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        handlers.clear();\n+    }\n+\n+    @Test\n+    void registerHandler() {\n+        notificationManager.registerHandler(\"sms\", notification -> {\n+            System.out.println(notification.getMessage());\n+        });\n+\n+        assertEquals(handlers.get(\"sms\"), notificationManager.getHANDLERS().get(\"sms\"));\n+    }\n+\n+    @Test\n+    void sendNotification() {\n+        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+        PrintStream originalOut = System.out;\n+        System.setOut(new PrintStream(outContent));\n+\n+        notificationManager.sendNotification(new Notification(\"email\", \"EMAIL: Dear user\"));\n+\n+        assertEquals(\"EMAIL: Dear user\\n\", outContent.toString());\n+\n+        System.setOut(originalOut);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/instagram_filters/FilterProcessor.java",
                "content": "+package instagram_filters;\n+\n+import java.util.function.Function;\n+\n+public class FilterProcessor {\n+    public Image applyFilter(Image image, Function<Image, Image> filter) {\n+        return filter.apply(image);\n+    }\n+\n+    public Function<Image, Image> combineFilters(Function<Image, Image> firstFilter, Function<Image, Image> secondFilter) {\n+        return image -> firstFilter.apply(secondFilter.apply(image));\n+    }\n+}"
            },
            {
                "filename": "src/main/java/instagram_filters/Image.java",
                "content": "+package instagram_filters;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+@Data\n+@AllArgsConstructor\n+public class Image {\n+    private String name;\n+    private String description;\n+}"
            },
            {
                "filename": "src/main/java/instagram_filters/Main.java",
                "content": "+package instagram_filters;\n+\n+import java.util.function.Function;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        Image original = new Image(\"image.png\", \"This is original image.png\");\n+\n+        FilterProcessor filterProcessor = new FilterProcessor();\n+\n+        Function<Image, Image> grayscaleFilter = (image) -> new Image(image.getName(), image.getDescription() + \" | Фильтр: черно-белый\");\n+        Function<Image, Image> sepiaFilter = (image) -> new Image(image.getName(), image.getDescription() + \" | Фильтр: сепия\");\n+\n+        Image grayscaleImage = filterProcessor.applyFilter(original, grayscaleFilter);\n+        System.out.println(grayscaleImage.getDescription());\n+\n+        Image sepiaImage = filterProcessor.applyFilter(grayscaleImage, sepiaFilter);\n+        System.out.println(sepiaImage.getDescription());\n+\n+        Function<Image, Image> combinedFilter = filterProcessor.combineFilters(grayscaleFilter, sepiaFilter);\n+        Image combinedImage = filterProcessor.applyFilter(original, combinedFilter);\n+        System.out.println(combinedImage.getDescription());}\n+}"
            },
            {
                "filename": "src/test/java/instagram_filters/FilterProcessorTest.java",
                "content": "+package instagram_filters;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.function.Function;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class FilterProcessorTest {\n+    private final Image IMAGE = new Image(\"original.png\", \"This is original.png\");\n+    private final FilterProcessor FILTER_PROCESSOR = new FilterProcessor();\n+\n+    private final Function<Image, Image> GRAYSCALE_FILTER = (image) -> new Image(image.getName(), image.getDescription() + \" | Фильтр: черно-белый\");\n+    private final Function<Image, Image> SEPIA_FILTER = (image) -> new Image(image.getName(), image.getDescription() + \" | Фильтр: сепия\");\n+\n+    @Test\n+    void applyFilter() {\n+        Image editedImage = FILTER_PROCESSOR.applyFilter(IMAGE, GRAYSCALE_FILTER);\n+\n+        assertEquals(\"original.png\", editedImage.getName());\n+        assertEquals(\"This is original.png | Фильтр: черно-белый\", editedImage.getDescription());\n+    }\n+\n+    @Test\n+    void combineFilters() {\n+        Function<Image, Image> newFilter = FILTER_PROCESSOR.combineFilters(GRAYSCALE_FILTER, SEPIA_FILTER);\n+        Image editedImage = FILTER_PROCESSOR.applyFilter(IMAGE, newFilter);\n+\n+        assertEquals(\"original.png\", editedImage.getName());\n+        assertEquals(\"This is original.png | Фильтр: сепия | Фильтр: черно-белый\", editedImage.getDescription());\n+    }\n+}"
            },
            {
                "filename": "src/main/java/heroes_of_might_and_magic/Angel.java",
                "content": "+package heroes_of_might_and_magic;\n+\n+public class Angel extends Creature {\n+    private static final int DAMAGE_COEFFICIENT = 5;\n+\n+    public Angel(String name, int level, int attack, int protection, int speed) {\n+        super(name, level, attack, protection, speed);\n+    }\n+\n+    @Override\n+    public int getDamage() {\n+        return this.getLevel() * DAMAGE_COEFFICIENT;\n+    }\n+}"
            },
            {
                "filename": "src/main/java/heroes_of_might_and_magic/Battlefield.java",
                "content": "+package heroes_of_might_and_magic;\n+\n+import java.util.Map;\n+\n+public class Battlefield {\n+    public Hero battle(Hero firstHero, Hero secondHero) {\n+        int hero1Power = calculateArmyPower(firstHero);\n+        int hero2Power = calculateArmyPower(secondHero);\n+\n+        System.out.println(firstHero.getName() + \" Army Power: \" + hero1Power);\n+        System.out.println(secondHero.getName() + \" Army Power: \" + hero2Power);\n+\n+        if (hero1Power > hero2Power) {\n+            System.out.println(firstHero.getName() + \" wins the battle!\");\n+            return firstHero;\n+        } else if (hero2Power > hero1Power) {\n+            System.out.println(secondHero.getName() + \" wins the battle!\");\n+            return secondHero;\n+        } else {\n+            System.out.println(\"It's a draw!\");\n+            return null;\n+        }\n+    }\n+\n+    private int calculateArmyPower(Hero hero) {\n+        int totalPower = 0;\n+        for (Map.Entry<Creature, Integer> entry : hero.getArmy().entrySet()) {\n+            Creature creature = entry.getKey();\n+            int quantity = entry.getValue();\n+            totalPower += creature.getDamage() * quantity;\n+        }\n+        return totalPower;\n+    }\n+}"
            },
            {
                "filename": "src/main/java/heroes_of_might_and_magic/Creature.java",
                "content": "+package heroes_of_might_and_magic;\n+\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+@Data\n+@AllArgsConstructor\n+public abstract class Creature {\n+    private String name;\n+    private int level;\n+    private int attack;\n+    private int protection;\n+    private int speed;\n+\n+    public abstract int getDamage();\n+}"
            },
            {
                "filename": "src/main/java/heroes_of_might_and_magic/Griffin.java",
                "content": "+package heroes_of_might_and_magic;\n+\n+public class Griffin extends Creature {\n+    private static final int DAMAGE_COEFFICIENT = 3;\n+\n+    public Griffin(String name, int level, int attack, int protection, int speed) {\n+        super(name, level, attack, protection, speed);\n+    }\n+\n+    @Override\n+    public int getDamage() {\n+        return this.getLevel() * DAMAGE_COEFFICIENT;\n+    }\n+}"
            },
            {
                "filename": "src/main/java/heroes_of_might_and_magic/Hero.java",
                "content": "+package heroes_of_might_and_magic;\n+\n+\n+import lombok.Data;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Data\n+public class Hero {\n+    private String name;\n+    private String fraction;\n+    private int experience;\n+    private int level;\n+    private Map<Creature, Integer> army;\n+\n+    public Hero(String name, String fraction, int experience, int level) {\n+        this.name = name;\n+        this.fraction = fraction;\n+        this.experience = experience;\n+        this.level = level;\n+        this.army = new HashMap<>();\n+    }\n+\n+    public void addCreature(Creature creature, int quantity) {\n+        army.put(creature, army.getOrDefault(creature, 0) + quantity);\n+    }\n+\n+    public void removeCreature(Creature creature, int quantity) {\n+        army.put(creature, Math.max(0, army.getOrDefault(creature, 0) - quantity));\n+        if (army.get(creature) == 0) {\n+            army.remove(creature);\n+        }\n+    }\n+}"
            },
            {
                "filename": "src/main/java/heroes_of_might_and_magic/Main.java",
                "content": "+package heroes_of_might_and_magic;\n+\n+import java.util.List;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        Hero firstHero = new Hero(\"John\", \"Theif\", 1, 5);\n+        Hero secondHero = new Hero(\"Jane\", \"Warrior\", 10, 50);\n+\n+        Creature angel = new Angel(\"Angel\", 5, 5, 5, 5);\n+        Creature griffin = new Griffin(\"Dragon\", 5, 5, 5, 5);\n+        Creature pikeman = new Pikeman(\"Pikeman\", 5, 5, 5, 5);\n+        Creature swordsman = new Swordman(\"Swordman\", 5, 5, 5, 5);\n+\n+        List<Creature> creatures = List.of(angel, griffin, pikeman, swordsman);\n+\n+        for (Creature creature : creatures) {\n+            firstHero.addCreature(creature, (int) Math.floor(Math.random() * 5) + 1);\n+            secondHero.addCreature(creature, (int) Math.floor(Math.random() * 5) + 1);\n+        }\n+\n+        Battlefield battlefield = new Battlefield();\n+        battlefield.battle(firstHero, secondHero);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/heroes_of_might_and_magic/Pikeman.java",
                "content": "+package heroes_of_might_and_magic;\n+\n+public class Pikeman extends Creature {\n+    private static final int DAMAGE_COEFFICIENT = 2;\n+\n+    public Pikeman(String name, int level, int attack, int protection, int speed) {\n+        super(name, level, attack, protection, speed);\n+    }\n+\n+    @Override\n+    public int getDamage() {\n+        return this.getLevel() * DAMAGE_COEFFICIENT;\n+    }\n+}"
            },
            {
                "filename": "src/main/java/heroes_of_might_and_magic/Swordman.java",
                "content": "+package heroes_of_might_and_magic;\n+\n+public class Swordman extends Creature {\n+    private static final int DAMAGE_COEFFICIENT = 4;\n+\n+    public Swordman(String name, int level, int attack, int protection, int speed) {\n+        super(name, level, attack, protection, speed);\n+    }\n+\n+    @Override\n+    public int getDamage() {\n+        return this.getLevel() * DAMAGE_COEFFICIENT;\n+    }\n+}"
            },
            {
                "filename": "src/test/java/heroes_of_might_and_magic/AngelTest.java",
                "content": "+package heroes_of_might_and_magic;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class AngelTest {\n+\n+    @Test\n+    void getDamage() {\n+        Angel angel = new Angel(\"Angel\", 5, 5, 5, 5);\n+        assertEquals(25, angel.getDamage());\n+    }\n+}"
            },
            {
                "filename": "src/test/java/heroes_of_might_and_magic/BattlefieldTest.java",
                "content": "+package heroes_of_might_and_magic;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class BattlefieldTest {\n+    static final Hero FIRST_HERO = new Hero(\"John\", \"Theif\", 1, 5);\n+    static final Hero SECOND_HERO = new Hero(\"Jane\", \"Warrior\", 10, 50);\n+    @BeforeEach\n+    void setUp() {\n+        Creature angel = new Angel(\"Angel\", 5, 5, 5, 5);\n+        Creature griffin = new Griffin(\"Dragon\", 5, 5, 5, 5);\n+        Creature pikeman = new Pikeman(\"Pikeman\", 5, 5, 5, 5);\n+        Creature swordsman = new Swordman(\"Swordman\", 5, 5, 5, 5);\n+\n+        List<Creature> creatures = List.of(angel, griffin, pikeman, swordsman);\n+\n+        for (Creature creature : creatures) {\n+            FIRST_HERO.addCreature(creature, 15);\n+            SECOND_HERO.addCreature(creature, 14);\n+        }\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        FIRST_HERO.getArmy().clear();\n+        SECOND_HERO.getArmy().clear();\n+    }\n+\n+    @Test\n+    void battle() {\n+        Battlefield battlefield = new Battlefield();\n+        Hero winner = battlefield.battle(FIRST_HERO, SECOND_HERO);\n+\n+        assertEquals(FIRST_HERO, winner);\n+    }\n+}"
            },
            {
                "filename": "src/test/java/heroes_of_might_and_magic/GriffinTest.java",
                "content": "+package heroes_of_might_and_magic;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class GriffinTest {\n+\n+    @Test\n+    void getDamage() {\n+        Griffin griffin = new Griffin(\"Griffin\", 5, 5, 5, 5);\n+        assertEquals(15, griffin.getDamage());\n+    }\n+}"
            },
            {
                "filename": "src/test/java/heroes_of_might_and_magic/HeroTest.java",
                "content": "+package heroes_of_might_and_magic;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class HeroTest {\n+    static final Hero FIRST_HERO = new Hero(\"John\", \"Theif\", 1, 5);\n+\n+    @BeforeEach\n+    void setUp() {\n+        FIRST_HERO.addCreature(new Pikeman(\"Pikeman\", 5, 5, 5, 5), 5);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        FIRST_HERO.getArmy().clear();\n+    }\n+\n+    @Test\n+    void addCreature() {\n+        FIRST_HERO.addCreature(new Pikeman(\"Angel\", 5, 5, 5, 5), 5);\n+        assertEquals(5, FIRST_HERO.getArmy().get(new Pikeman(\"Angel\", 5, 5, 5, 5)));\n+    }\n+\n+    @Test\n+    void removeCreature() {\n+        FIRST_HERO.removeCreature(new Pikeman(\"Angel\", 5, 5, 5, 5), 5);\n+        assertNull(FIRST_HERO.getArmy().get(new Pikeman(\"Angel\", 5, 5, 5, 5)));\n+    }\n+}"
            },
            {
                "filename": "src/test/java/heroes_of_might_and_magic/PikemanTest.java",
                "content": "+package heroes_of_might_and_magic;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PikemanTest {\n+\n+    @Test\n+    void getDamage() {\n+        Pikeman pikeman = new Pikeman(\"Pikeman\", 5, 5, 5, 5);\n+        assertEquals(10, pikeman.getDamage());\n+    }\n+}"
            },
            {
                "filename": "src/test/java/heroes_of_might_and_magic/SwordmanTest.java",
                "content": "+package heroes_of_might_and_magic;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class SwordmanTest {\n+\n+    @Test\n+    void getDamage() {\n+        Swordman swordman = new Swordman(\"Swordman\", 5, 5, 5, 5);\n+        assertEquals(20, swordman.getDamage());\n+    }\n+}"
            },
            {
                "filename": "src/main/java/lord_of_the_rings_rpg/Character.java",
                "content": "+package lord_of_the_rings_rpg;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+import java.util.List;\n+\n+@Data\n+@AllArgsConstructor\n+public class Character {\n+    private List<Item> inventory;\n+}"
            },
            {
                "filename": "src/main/java/lord_of_the_rings_rpg/InventoryManager.java",
                "content": "+package lord_of_the_rings_rpg;\n+\n+\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+public class InventoryManager {\n+    public void addItem(Character character, Item item, Consumer<Item> callback) {\n+        character.getInventory().add(item);\n+        callback.accept(item);\n+    }\n+\n+    public void removeItem(Character character, Predicate<Item> filter) {\n+        character.getInventory().removeIf(filter);\n+    }\n+\n+    public void updateItem(Character character, Predicate<Item> filter, Function<Item, Item> updater) {\n+        Item newItem = null;\n+        for (Item item : character.getInventory()) {\n+            if (filter.test(item)) {\n+                newItem = updater.apply(item);\n+            }\n+        }\n+        character.getInventory().removeIf(filter);\n+        character.getInventory().add(newItem);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/lord_of_the_rings_rpg/Item.java",
                "content": "+package lord_of_the_rings_rpg;\n+\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+@Data\n+@AllArgsConstructor\n+public class Item {\n+    private String name;\n+    private int value;\n+}"
            },
            {
                "filename": "src/main/java/lord_of_the_rings_rpg/Main.java",
                "content": "+package lord_of_the_rings_rpg;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        List<Item> inventory = new ArrayList<>();\n+\n+        Character frodo = new Character(inventory);\n+        Item ring = new Item(\"The One Ring\", 1000);\n+\n+        InventoryManager manager = new InventoryManager();\n+\n+        manager.addItem(frodo, ring, (item) -> System.out.println(item.getName() + \" был добавлен в инвентарь.\"));\n+\n+        manager.removeItem(frodo, (item) -> item.getName().equals(\"The One Ring\"));\n+\n+        System.out.println(inventory);\n+\n+        manager.addItem(frodo, ring, (item) -> System.out.println(item.getName() + \" снова добавлен.\"));\n+        manager.updateItem(frodo, (item) -> item.getName().equals(\"The One Ring\"), (item) -> new Item(item.getName(), item.getValue() * 2));\n+\n+        frodo.getInventory().forEach(item -> System.out.println(item.getName() + \": \" + item.getValue()));\n+    }\n+}"
            },
            {
                "filename": "src/test/java/lord_of_the_rings_rpg/InventoryManagerTest.java",
                "content": "+package lord_of_the_rings_rpg;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class InventoryManagerTest {\n+    private final List<Item> INVENTORY = new ArrayList<>();\n+    private final Character FRODO = new Character(INVENTORY);\n+    private final Item RING = new Item(\"The One Ring\", 1);\n+    private final Item SWORD = new Item(\"The Sword of Frodo\", 2);\n+    private final Item BOW = new Item(\"The Battle Bow of Frodo\", 3);\n+    private final InventoryManager MANAGER = new InventoryManager();\n+\n+    @BeforeEach\n+    void setUp() {\n+        MANAGER.addItem(FRODO, SWORD, (item) -> System.out.println(item.getName() + \" был добавлен в инвентарь.\"));\n+        MANAGER.addItem(FRODO, BOW, (item) -> System.out.println(item.getName() + \" был добавлен в инвентарь.\"));\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        INVENTORY.clear();\n+    }\n+\n+    @Test\n+    void addItem() {\n+        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+        PrintStream originalOut = System.out;\n+        System.setOut(new PrintStream(outContent));\n+\n+        MANAGER.addItem(FRODO, RING, (item) -> System.out.println(item.getName() + \" был добавлен в инвентарь.\"));\n+\n+        assertEquals(\"The One Ring был добавлен в инвентарь.\\n\", outContent.toString());\n+\n+        System.setOut(originalOut);\n+    }\n+\n+    @Test\n+    void removeItem() {\n+        MANAGER.removeItem(FRODO, (item) -> item.getName().equals(\"The Battle Bow of Frodo\"));\n+        assertFalse(FRODO.getInventory().contains(BOW));\n+    }\n+\n+    @Test\n+    void updateItem() {\n+        MANAGER.updateItem(FRODO, (item) -> item.getName().equals(\"The Sword of Frodo\"), (item) -> new Item(item.getName(), item.getValue() * 10));\n+        assertTrue(FRODO.getInventory().contains(new Item(SWORD.getName(), SWORD.getValue() * 10)));\n+    }\n+}"
            },
            {
                "filename": "src/main/java/secrets_of_the_droids/Droid.java",
                "content": "+package secrets_of_the_droids;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import secrets_of_the_droids.interfaces.DroidMessageEncryptor;\n+\n+@Getter\n+@AllArgsConstructor\n+public class Droid {\n+    private final String name;\n+    private final int THE_NUMBER_OF_LETTERS_IN_THE_ALPHABET = 26;\n+\n+    /**\n+     * Encrypts a message by replacing each letter with the letter\n+     * <code>encryptionKey</code> positions down the alphabet.\n+     *\n+     * @param message the message to encrypt\n+     * @param encryptionKey the key to use for encryption\n+     * @return the encrypted message\n+     */\n+    private String encryptMessage(String message, int encryptionKey) {\n+        DroidMessageEncryptor encryptor = (msg, key) -> encrypt(message, encryptionKey);\n+        return encryptor.encrypt(message, encryptionKey);\n+    }\n+\n+    /**\n+     * Decrypts a message that was encrypted by replacing each letter with the letter\n+     * <code>encryptionKey</code> positions down the alphabet.\n+     *\n+     * @param message the message to decrypt\n+     * @param encryptionKey the key to use for decryption\n+     * @return the decrypted message\n+     */\n+    private String decryptMessage(String message, int encryptionKey) {\n+        DroidMessageEncryptor decryptor = (msg, key) -> encrypt(\n+                message,\n+                THE_NUMBER_OF_LETTERS_IN_THE_ALPHABET - (encryptionKey % THE_NUMBER_OF_LETTERS_IN_THE_ALPHABET)\n+        );\n+        return decryptor.encrypt(message, encryptionKey);\n+    }\n+\n+    /**\n+     * Encrypts a message by replacing each letter with the letter\n+     * <code>encryptionKey</code> positions down the alphabet.\n+     *\n+     * @param message the message to encrypt\n+     * @param encryptionKey the key to use for encryption\n+     * @return the encrypted message\n+     */\n+    private String encrypt(String message, int encryptionKey) {\n+        StringBuilder encryptedText = new StringBuilder();\n+        encryptionKey = encryptionKey % THE_NUMBER_OF_LETTERS_IN_THE_ALPHABET;\n+        for (char c : message.toCharArray()) {\n+            if (Character.isLetter(c)) {\n+                char base = Character.isLowerCase(c) ? 'a' : 'A';\n+                char shiftedChar = (char) ((c - base + encryptionKey) % THE_NUMBER_OF_LETTERS_IN_THE_ALPHABET + base);\n+                encryptedText.append(shiftedChar);\n+            } else {\n+                encryptedText.append(c);\n+            }\n+        }\n+        return encryptedText.toString();\n+    }\n+\n+    /**\n+     * Sends a message to the specified droid, encrypting the message first with the specified key.\n+     *\n+     * @param droid the droid to send the message to\n+     * @param message the message to send\n+     * @param encryptionKey the key to encrypt the message with\n+     */\n+    public void sendMessage(Droid droid, String message, int encryptionKey) {\n+        String encryptMessage =  encryptMessage(message, encryptionKey);\n+        System.out.printf(\"%s отправил зашифрованное сообщение: %s%n\", getName(), encryptMessage);\n+\n+        droid.receiveMessage(encryptMessage, encryptionKey);\n+    }\n+\n+    /**\n+     * Decrypts the message and prints it to the console.\n+     *\n+     * @param encryptedMessage the encrypted message to decrypt and print\n+     * @param encryptionKey the key to decrypt the message with\n+     */\n+    public void receiveMessage(String encryptedMessage, int encryptionKey) {\n+        String decryptedMessage = decryptMessage(encryptedMessage, encryptionKey);\n+        System.out.printf(\"%s получил расшифрованное сообщение: %s%n\", getName(), decryptedMessage);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/secrets_of_the_droids/Main.java",
                "content": "+package secrets_of_the_droids;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        Droid r2d2 = new Droid(\"R2D2\");\n+        Droid c3po = new Droid(\"C3PO\");\n+        Droid bb8 = new Droid(\"BB-8\");\n+\n+        String firstMessage = \"Join the Rebellion!\";\n+        String secondMessage = \"The Death Star is operational!\";\n+        int firstEncryptionKey = 3;\n+        int secondEncryptionKey = 7;\n+\n+        r2d2.sendMessage(c3po, firstMessage, firstEncryptionKey);\n+        c3po.sendMessage(r2d2, secondMessage, secondEncryptionKey);\n+        bb8.sendMessage(c3po, \"The mission is complete.\", firstEncryptionKey);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/secrets_of_the_droids/interfaces/DroidMessageEncryptor.java",
                "content": "+package secrets_of_the_droids.interfaces;\n+\n+@FunctionalInterface\n+public interface DroidMessageEncryptor {\n+    String encrypt(String message, int encryptionKey);\n+}"
            },
            {
                "filename": "src/test/java/secrets_of_the_droids/DroidTest.java",
                "content": "+package secrets_of_the_droids;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class DroidTest {\n+    private final Droid R2D2 = new Droid(\"R2D2\");\n+    private final Droid C3PO = new Droid(\"C3PO\");\n+    private final Droid BB8 = new Droid(\"BB-8\");\n+\n+    @Test\n+    void sendMessage() {\n+        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+        PrintStream originalOut = System.out;\n+        System.setOut(new PrintStream(outContent));\n+\n+        String FIRST_MESSAGE = \"Join the Rebellion!\";\n+        int FIRST_ENCRYPTION_KEY = 3;\n+        R2D2.sendMessage(C3PO, FIRST_MESSAGE, FIRST_ENCRYPTION_KEY);\n+\n+        assertEquals(\n+                \"R2D2 отправил зашифрованное сообщение: Mrlq wkh Uhehoolrq!\\n\" +\n+                \"C3PO получил расшифрованное сообщение: Join the Rebellion!\\n\",\n+                outContent.toString()\n+        );\n+\n+        System.setOut(originalOut);\n+    }\n+\n+    @Test\n+    void receiveMessage() {\n+        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+        PrintStream originalOut = System.out;\n+        System.setOut(new PrintStream(outContent));\n+\n+        String SECOND_MESSAGE = \"The Death Star is operational!\";\n+        int SECOND_ENCRYPTION_KEY = 7;\n+        BB8.receiveMessage(SECOND_MESSAGE, SECOND_ENCRYPTION_KEY);\n+\n+        assertEquals(\n+                \"BB-8 получил расшифрованное сообщение: Max Wxtma Lmtk bl hixktmbhgte!\\n\",\n+                outContent.toString()\n+        );\n+\n+        System.setOut(originalOut);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/calculator/Calculator.java",
                "content": "+package calculator;\n+\n+@FunctionalInterface\n+public interface Calculator<T> {\n+    T calculate(T first, T second);\n+}"
            },
            {
                "filename": "src/main/java/calculator/CalculatorManager.java",
                "content": "+package calculator;\n+\n+import java.util.List;\n+\n+public class CalculatorManager {\n+    public static int calculate(List<Integer> nums, Calculator calculator) throws IllegalArgumentException {\n+        if (nums.isEmpty()) {\n+            throw new IllegalArgumentException(\"List nums is not be empty\");\n+        }\n+        int result = nums.get(0);\n+        for (int i = 1; i < nums.size(); ++i) {\n+            result = (int) calculator.calculate(result, nums.get(i));\n+        }\n+        return result;\n+    }\n+\n+    public static int sum(List<Integer> nums) {\n+        return calculate(nums, (a, b) -> (int) a + (int) b);\n+    }\n+\n+    public static int product(List<Integer> nums) {\n+        return calculate(nums, (a, b) -> (int) a * (int) b);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/calculator/Main.java",
                "content": "+package calculator;\n+\n+import java.util.List;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        List<Integer> numbers = List.of(1, 2, 3, 4, 5);\n+        int resultSum = CalculatorManager.sum(numbers);\n+        System.out.println(\"Sum: \" + resultSum);\n+\n+        int resultProduct = CalculatorManager.product(numbers);\n+        System.out.println(\"Product: \" + resultProduct);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/gmail_rich_filters/Email.java",
                "content": "+package gmail_rich_filters;\n+\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+@Data\n+@AllArgsConstructor\n+public class Email {\n+    private String subject;\n+    private String body;\n+    private boolean isImportant;\n+}"
            },
            {
                "filename": "src/main/java/gmail_rich_filters/EmailProcessor.java",
                "content": "+package gmail_rich_filters;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+public class EmailProcessor {\n+    public void processEmails(\n+            List<Email> emails,\n+            Predicate<Email> filter,\n+            Consumer<Email> handler,\n+            Function<Email, String> transformer\n+    ) {\n+        for (Email email : emails) {\n+            if (filter.test(email)) {\n+                String editedBody = transformer.apply(email);\n+                email.setBody(editedBody);\n+                handler.accept(email);\n+            }\n+        }\n+    }\n+}"
            },
            {
                "filename": "src/main/java/gmail_rich_filters/Main.java",
                "content": "+package gmail_rich_filters;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        EmailProcessor emailProcessor = new EmailProcessor();\n+\n+        List<Email> emails = Arrays.asList(\n+                new Email(\"Письмо 1\", \"Текст письма 1\", false),\n+                new Email(\"Письмо 2\", \"Текст письма 2\", true),\n+                new Email(\"Спам\", \"Текст спама\", false)\n+        );\n+\n+        Predicate<Email> importantFilter = Email::isImportant;\n+        Consumer<Email> printEmail = email -> System.out.println(\"Обработано письмо: \" + email.getSubject());\n+        Function<Email, String> toUpperCase = email -> email.getBody().toUpperCase();\n+\n+        emailProcessor.processEmails(emails, importantFilter, printEmail, toUpperCase);\n+\n+        emails.forEach(email -> System.out.println(\"Тема: \" + email.getSubject() + \", Тело письма: \" + email.getBody()));\n+    }\n+}"
            },
            {
                "filename": "src/main/java/google_translator_is_under_our_control/DictionaryProcessor.java",
                "content": "+package google_translator_is_under_our_control;\n+\n+import java.util.function.BiConsumer;\n+\n+public class DictionaryProcessor {\n+    public void processWord(String originWord, String translatedWord, BiConsumer<String, String> add) {\n+        add.accept(translatedWord, originWord);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/google_translator_is_under_our_control/Main.java",
                "content": "+package google_translator_is_under_our_control;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        DictionaryProcessor dictionaryProcessor = new DictionaryProcessor();\n+        Map<String, String> dictionary = new HashMap<>();\n+\n+        BiConsumer<String, String> addWordToDictionary = dictionary::put;\n+\n+        dictionaryProcessor.processWord(\"привет\", \"hello\", addWordToDictionary);\n+        dictionaryProcessor.processWord(\"мир\", \"world\", addWordToDictionary);\n+        dictionaryProcessor.processWord(\"программирование\", \"programming\", addWordToDictionary);\n+\n+        System.out.println(\"Словарь: \" + dictionary);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/hogwarts_hogwarts_our_beloved_hogwarts/Main.java",
                "content": "+package hogwarts_hogwarts_our_beloved_hogwarts;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        SpellCaster spellCaster = new SpellCaster();\n+\n+        String alohomora = \"Alohomora\";\n+        String lumos = \"Lumos\";\n+        String expelliarmus = \"Expelliarmus\";\n+\n+        spellCaster.cast(alohomora, (spell) -> \"The door is unlocked by \" + spell);\n+        spellCaster.cast(lumos, (spell) -> \"A beam of light is created by \" + spell);\n+        spellCaster.cast(expelliarmus, (spell) -> \"The opponent is disarmed by \" + spell);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/hogwarts_hogwarts_our_beloved_hogwarts/SpellAction.java",
                "content": "+package hogwarts_hogwarts_our_beloved_hogwarts;\n+\n+@FunctionalInterface\n+public interface SpellAction {\n+    String cast(String spell);\n+}"
            },
            {
                "filename": "src/main/java/hogwarts_hogwarts_our_beloved_hogwarts/SpellCaster.java",
                "content": "+package hogwarts_hogwarts_our_beloved_hogwarts;\n+\n+\n+public class SpellCaster {\n+    public void cast(String spell, SpellAction action) {\n+        String result = action.cast(spell);\n+        System.out.println(result);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/lets_remember_the_school/TriangleAreaCalculator.java",
                "content": "+package lets_remember_the_school;\n+\n+import java.util.function.Function;\n+\n+public class TriangleAreaCalculator {\n+    Function<Double, Function<Double, Double>> add = (x) -> (y) -> x + y;\n+    Function<Double, Function<Double, Double>> multiply = (x) -> (y) -> x * y;\n+    Function<Double, Function<Double, Double>> subtract = (x) -> (y) -> x - y;\n+    Function<Double, Function<Double, Double>> divide = (x) -> (y) -> x / y;\n+    Function<Double, Double> squareRoot = Math::sqrt;\n+\n+    /**\n+     * Calculate the area of the triangle with given sides.\n+     *\n+     * @param a the length of the first side\n+     * @param b the length of the second side\n+     * @param c the length of the third side\n+     * @return the area of the triangle\n+     * @throws IllegalArgumentException if the given sides don't form a valid triangle\n+     */\n+    public Double calculateTriangleArea(double a, double b, double c) throws IllegalArgumentException {\n+        if (add.apply(a).apply(b) <= c || add.apply(a).apply(c) <= b || add.apply(b).apply(c) <= a) {\n+            throw new IllegalArgumentException(\"Треугольник с такими сторонами не может существовать\");\n+        }\n+\n+        Double halfMeter = divide.apply(add.apply(add.apply(a).apply(b)).apply(c)).apply(2.0);\n+\n+        Double diffHalfMeterAndA = subtract.apply(halfMeter).apply(a);\n+        Double diffHalfMeterAndB = subtract.apply(halfMeter).apply(b);\n+        Double diffHalfMeterAndC = subtract.apply(halfMeter).apply(c);\n+\n+        Double resultMultiply = multiply.apply(halfMeter)\n+                .apply(multiply.apply(multiply\n+                                .apply(diffHalfMeterAndA)\n+                                .apply(diffHalfMeterAndB))\n+                        .apply(diffHalfMeterAndC));\n+\n+        return squareRoot.apply(resultMultiply);\n+    }\n+\n+    public static void main(String[] args) {\n+        TriangleAreaCalculator calculator = new TriangleAreaCalculator();\n+\n+        try {\n+            double area = calculator.calculateTriangleArea(3, 4, 5);\n+            System.out.println(\"Площадь треугольника: \" + area);\n+        } catch (IllegalArgumentException e) {\n+            System.out.println(e.getMessage());\n+        }\n+    }\n+}"
            },
            {
                "filename": "src/main/java/lets_rotate_the_matrix/Coordinates.java",
                "content": "+package lets_rotate_the_matrix;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+@Data\n+@AllArgsConstructor\n+public class Coordinates {\n+    private int x;\n+    private int y;\n+}"
            },
            {
                "filename": "src/main/java/lets_rotate_the_matrix/FlipDirection.java",
                "content": "+package lets_rotate_the_matrix;\n+\n+public enum FlipDirection {\n+    HORIZONTAL, VERTICAL\n+}"
            },
            {
                "filename": "src/main/java/lets_rotate_the_matrix/Main.java",
                "content": "+package lets_rotate_the_matrix;\n+\n+import java.util.Arrays;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        int[][] matrix = {{1, 2}, {3, 4}};\n+\n+        int[][] resultMatrixVertical = MatrixTransformProcessor.flipMatrix(matrix, FlipDirection.VERTICAL);\n+        System.out.println(Arrays.deepToString(resultMatrixVertical));\n+\n+        int[][] resultMatrixHorizontal = MatrixTransformProcessor.flipMatrix(matrix, FlipDirection.HORIZONTAL);\n+        System.out.println(Arrays.deepToString(resultMatrixHorizontal));\n+\n+        int[][] resultMatrixTransformed = MatrixTransformProcessor.transformMatrix(matrix, (idxRow, idxColumn) -> new Coordinates(idxColumn, idxRow));\n+        System.out.println(Arrays.deepToString(resultMatrixTransformed));\n+    }\n+}"
            },
            {
                "filename": "src/main/java/lets_rotate_the_matrix/MatrixTransformProcessor.java",
                "content": "+package lets_rotate_the_matrix;\n+\n+public class MatrixTransformProcessor {\n+    /**\n+     * Applies a transformation to the given matrix and returns the result.\n+     *\n+     * <p>The given matrix is transformed into a new matrix by applying the given\n+     * transformation to each element of the original matrix. The transformation is\n+     * done by calling the\n+     * {@link MatrixTransformer#transform(int, int)} method on the transformer object.\n+     *\n+     * @param matrix the matrix to be transformed\n+     * @param transformer the transformation to be applied to the matrix\n+     * @return a new matrix that is the result of the transformation\n+     */\n+    public static int[][] transformMatrix(int[][] matrix, MatrixTransformer transformer) {\n+        int[][] newMatrix = new int[matrix.length][matrix[0].length];\n+\n+        for (int i = 0; i < matrix.length; ++i) {\n+            for (int j = 0; j < matrix[0].length; ++j) {\n+                Coordinates newCoordinates = transformer.transform(i, j);\n+                newMatrix[newCoordinates.getX()][newCoordinates.getY()] = matrix[i][j];\n+            }\n+        }\n+\n+        return newMatrix;\n+    }\n+\n+\n+    /**\n+     * Flips the given matrix horizontally or vertically, depending on the given\n+     * {@link FlipDirection}.\n+     *\n+     * <p>If the given direction is {@link FlipDirection#HORIZONTAL}, this method\n+     * flips the matrix about the horizontal middle line. If the given direction is\n+     * {@link FlipDirection#VERTICAL}, this method flips the matrix about the vertical\n+     * middle line.\n+     *\n+     * @param matrix the matrix to be flipped\n+     * @param flipDirection the direction of the flip\n+     * @return the flipped matrix\n+     */\n+    public static int[][] flipMatrix(int[][] matrix, FlipDirection flipDirection) {\n+        return switch (flipDirection) {\n+            case HORIZONTAL -> transformMatrix(matrix, (x, y) -> new Coordinates(x, matrix[0].length - 1 - y));\n+            case VERTICAL -> transformMatrix(matrix, (x, y) -> new Coordinates(matrix.length - 1 - x, y));\n+            default -> throw new IllegalArgumentException(\"Invalid flip direction\");\n+        };\n+    }\n+}"
            },
            {
                "filename": "src/main/java/lets_rotate_the_matrix/MatrixTransformer.java",
                "content": "+package lets_rotate_the_matrix;\n+\n+@FunctionalInterface\n+public interface MatrixTransformer {\n+    Coordinates transform(int idxRow, int idxColumn);\n+}"
            },
            {
                "filename": "src/main/java/uber_millionaires/FareCalculator.java",
                "content": "+package uber_millionaires;\n+\n+import java.util.function.BiFunction;\n+\n+public class FareCalculator {\n+    public double calculateFare(double distance, double time, BiFunction<Double, Double, Double> fare) {\n+        return fare.apply(distance, time);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/uber_millionaires/Main.java",
                "content": "+package uber_millionaires;\n+\n+import java.util.function.BiFunction;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        FareCalculator fareCalculator = new FareCalculator();\n+\n+        BiFunction<Double, Double, Double> economyFare = (distance, time) -> 1.0 * distance + 0.5 * time;\n+        BiFunction<Double, Double, Double> comfortFare = (distance, time) -> 1.5 * distance + 0.8 * time;\n+        BiFunction<Double, Double, Double> premiumFare = (distance, time) -> 2.0 * distance + 1.5 * time;\n+\n+        double distance = 10.0;\n+        double time = 15.0;\n+\n+        double economyTripCost = fareCalculator.calculateFare(distance, time, economyFare);\n+        double comfortTripCost = fareCalculator.calculateFare(distance, time, comfortFare);\n+        double premiumTripCost = fareCalculator.calculateFare(distance, time, premiumFare);\n+\n+        System.out.println(\"Стоимость поездки на тарифе Economy: \" + economyTripCost);\n+        System.out.println(\"Стоимость поездки на тарифе Comfort: \" + comfortTripCost);\n+        System.out.println(\"Стоимость поездки на тарифе Premium: \" + premiumTripCost);\n+    }\n+}"
            },
            {
                "filename": "src/test/java/calculator/CalculatorManagerTest.java",
                "content": "+package calculator;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class CalculatorManagerTest {\n+    private final List<Integer> NUMBERS = List.of(1, 2, 3, 4, 5);\n+\n+    @Test\n+    void calculate() {\n+        int result = CalculatorManager.calculate(NUMBERS, (a, b) -> (int) a - (int) b);\n+        assertEquals(-13, result);\n+    }\n+\n+    @Test\n+    void sum() {\n+        int result = CalculatorManager.sum(NUMBERS);\n+        assertEquals(15, result);\n+    }\n+\n+    @Test\n+    void product() {\n+        int result = CalculatorManager.product(NUMBERS);\n+        assertEquals(120, result);\n+    }\n+}"
            },
            {
                "filename": "src/test/java/gmail_rich_filters/EmailProcessorTest.java",
                "content": "+package gmail_rich_filters;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class EmailProcessorTest {\n+    private final EmailProcessor EMAIL_PROCESSOR = new EmailProcessor();\n+\n+    private final List<Email> EMAILS = Arrays.asList(\n+            new Email(\"Письмо 1\", \"Текст письма 1\", false),\n+            new Email(\"Письмо 2\", \"Текст письма 2\", true),\n+            new Email(\"Спам\", \"Текст спама\", false)\n+    );\n+\n+    @BeforeEach\n+    void setUp() {\n+        Predicate<Email> importantFilter = Email::isImportant;\n+        Consumer<Email> printEmail = email -> System.out.println(\"Обработано письмо: \" + email.getSubject());\n+        Function<Email, String> toUpperCase = email -> email.getBody().toUpperCase();\n+\n+        EMAIL_PROCESSOR.processEmails(EMAILS, importantFilter, printEmail, toUpperCase);\n+    }\n+\n+    @Test\n+    void processEmails() {\n+        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+        PrintStream originalOut = System.out;\n+        System.setOut(new PrintStream(outContent));\n+\n+        EMAILS.forEach(email -> System.out.println(\"Тема: \" + email.getSubject() + \", Тело письма: \" + email.getBody()));\n+\n+        assertEquals(\n+                \"Тема: Письмо 1, Тело письма: Текст письма 1\\n\" +\n+                        \"Тема: Письмо 2, Тело письма: ТЕКСТ ПИСЬМА 2\\n\" +\n+                        \"Тема: Спам, Тело письма: Текст спама\\n\",\n+                outContent.toString()\n+        );\n+\n+        System.setOut(originalOut);\n+    }\n+}"
            },
            {
                "filename": "src/test/java/google_translator_is_under_our_control/DictionaryProcessorTest.java",
                "content": "+package google_translator_is_under_our_control;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class DictionaryProcessorTest {\n+    private final DictionaryProcessor DICTIONARY_PROCESSOR = new DictionaryProcessor();\n+    private final Map<String, String> DICTIONARY = new HashMap<>();\n+\n+    private final BiConsumer<String, String> ADD_WORD_TO_DICTIONARY = DICTIONARY::put;\n+\n+    @Test\n+    void processWord() {\n+        DICTIONARY_PROCESSOR.processWord(\"привет\", \"hello\", ADD_WORD_TO_DICTIONARY);\n+\n+        assertEquals(\"{hello=привет}\", DICTIONARY);\n+    }\n+}"
            },
            {
                "filename": "src/test/java/hogwarts_hogwarts_our_beloved_hogwarts/SpellCasterTest.java",
                "content": "+package hogwarts_hogwarts_our_beloved_hogwarts;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class SpellCasterTest {\n+    @Test\n+    void cast() {\n+        SpellCaster spellCaster = new SpellCaster();\n+\n+        String alohomora = \"Alohomora\";\n+        String lumos = \"Lumos\";\n+        String expelliarmus = \"Expelliarmus\";\n+\n+        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+        PrintStream originalOut = System.out;\n+        System.setOut(new PrintStream(outContent));\n+\n+        spellCaster.cast(alohomora, (spell) -> \"The door is unlocked by \" + spell);\n+        spellCaster.cast(lumos, (spell) -> \"A beam of light is created by \" + spell);\n+        spellCaster.cast(expelliarmus, (spell) -> \"The opponent is disarmed by \" + spell);\n+\n+        assertEquals(\n+                \"The door is unlocked by Alohomora\\n\" +\n+                        \"A beam of light is created by Lumos\\n\" +\n+                        \"The opponent is disarmed by Expelliarmus\\n\",\n+                outContent.toString()\n+        );\n+\n+        System.setOut(originalOut);\n+    }\n+}"
            },
            {
                "filename": "src/test/java/lets_remember_the_school/TriangleAreaCalculatorTest.java",
                "content": "+package lets_remember_the_school;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+class TriangleAreaCalculatorTest {\n+    private final TriangleAreaCalculator CALCULATOR = new TriangleAreaCalculator();\n+\n+    @Test\n+    void calculateTriangleArea() {\n+        double area = CALCULATOR.calculateTriangleArea(3, 4, 5);\n+        assertEquals(6.0, area);\n+    }\n+\n+    @Test\n+    void calculateTriangleAreaWithError() {\n+        Throwable exception = assertThrows(IllegalArgumentException.class, () -> CALCULATOR.calculateTriangleArea(1, 1, 0));\n+        assertEquals(\"Треугольник с такими сторонами не может существовать\", exception.getMessage());\n+    }\n+}"
            },
            {
                "filename": "src/test/java/lets_rotate_the_matrix/MatrixTransformProcessorTest.java",
                "content": "+package lets_rotate_the_matrix;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class MatrixTransformProcessorTest {\n+    private final int[][] MATRIX = {{1, 2}, {3, 4}};\n+\n+    @Test\n+    void transformMatrix() {\n+        int[][] resultMatrixTransformed = MatrixTransformProcessor.transformMatrix(MATRIX, (idxRow, idxColumn) -> new Coordinates(idxColumn, idxRow));\n+        assertEquals(Arrays.deepToString(new int[][]{{1, 3}, {2, 4}}), Arrays.deepToString(resultMatrixTransformed));\n+    }\n+\n+    @Test\n+    void flipMatrixVertical() {\n+        int[][] resultMatrixVertical = MatrixTransformProcessor.flipMatrix(MATRIX, FlipDirection.VERTICAL);\n+        assertEquals(Arrays.deepToString(new int[][]{{3, 4}, {1, 2}}), Arrays.deepToString(resultMatrixVertical));\n+    }\n+\n+    @Test\n+    void flipMatrixHorizontal() {\n+        int[][] resultMatrixHorizontal = MatrixTransformProcessor.flipMatrix(MATRIX, FlipDirection.HORIZONTAL);\n+        assertEquals(Arrays.deepToString(new int[][]{{2, 1}, {4, 3}}), Arrays.deepToString(resultMatrixHorizontal));\n+    }\n+}"
            },
            {
                "filename": "src/test/java/uber_millionaires/FareCalculatorTest.java",
                "content": "+package uber_millionaires;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.function.BiFunction;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class FareCalculatorTest {\n+    private final FareCalculator FARE_CALCULATOR = new FareCalculator();\n+\n+    private final BiFunction<Double, Double, Double> ECONOMY_FARE = (distance, time) -> 1.0 * distance + 0.5 * time;\n+    private final BiFunction<Double, Double, Double> COMFORT_FARE = (distance, time) -> 1.5 * distance + 0.8 * time;\n+    private final BiFunction<Double, Double, Double> PREMIUM_FARE = (distance, time) -> 2.0 * distance + 1.5 * time;\n+\n+    @Test\n+    void calculateFare() {\n+        double distance = 10.0;\n+        double time = 15.0;\n+\n+        double economyTripCost = FARE_CALCULATOR.calculateFare(distance, time, ECONOMY_FARE);\n+        double comfortTripCost = FARE_CALCULATOR.calculateFare(distance, time, COMFORT_FARE);\n+        double premiumTripCost = FARE_CALCULATOR.calculateFare(distance, time, PREMIUM_FARE);\n+\n+        assertEquals(17.5, economyTripCost);\n+        assertEquals(27.0, comfortTripCost);\n+        assertEquals(42.5, premiumTripCost);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/lets_build_a_csv/CsvProcessor.java",
                "content": "+package lets_build_a_csv;\n+\n+import java.util.List;\n+\n+public class CsvProcessor {\n+    /**\n+     * Takes a table in the form of a list of lists and returns a string in CSV format.\n+     *\n+     * The outer list represents the rows of the table, and the inner lists represent the\n+     * columns. Each element in the inner list is a string that will be used as the value\n+     * for that column in the given row.\n+     *\n+     * For example, the following table:\n+     * <pre>\n+     * [\n+     *     [\"Name\", \"Age\", \"Occupation\"],\n+     *     [\"John Doe\", \"20\", \"Software Engineer\"],\n+     *     [\"Jane Doe\", \"22\", \"Marketing Manager\"],\n+     *     [\"Bob Smith\", \"30\", \"Accountant\"]\n+     * ]</pre>\n+     * Will be converted to:\n+     * <pre>\n+     * Name, Age, Occupation\n+     * John Doe, 20, Software Engineer\n+     * Jane Doe, 22, Marketing Manager\n+     * Bob Smith, 30, Accountant\n+     * </pre>\n+     *\n+     * @param table the table to be converted\n+     * @return a string in CSV format\n+     */\n+    public static String toCSV(List<List<String>> table) {\n+        VectorJoiner<String> vector_joiner = (vector) -> {\n+            if (vector.isEmpty()) {\n+                throw new IllegalArgumentException(\"List cannot be empty\");\n+            }\n+            StringBuilder builder = new StringBuilder();\n+            builder.append(vector.get(0));\n+\n+            for (int i = 1; i < vector.size(); ++i) {\n+                builder.append(\", \").append(vector.get(i));\n+            }\n+            return builder.toString();\n+        };\n+\n+        MatrixJoiner<String> matrixJoiner = matrix -> {\n+            if (matrix.isEmpty()) {\n+                throw new IllegalArgumentException(\"List cannot be empty\");\n+            }\n+\n+            StringBuilder builder = new StringBuilder();\n+            for (int i = 0; i < matrix.size(); ++i) {\n+                builder.append(vector_joiner.join(matrix.get(i)));\n+                if (i < matrix.size() - 1) {\n+                    builder.append(\"\\n\");\n+                }\n+            }\n+            return builder.toString();\n+        };\n+\n+        return matrixJoiner.join(table);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/lets_build_a_csv/Main.java",
                "content": "+package lets_build_a_csv;\n+\n+import java.util.List;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        String result = CsvProcessor.toCSV(\n+                List.of(\n+                        List.of(\"1\", \"2\", \"3\", \"4\", \"5\"),\n+                        List.of(\"6\", \"7\", \"8\", \"9\", \"10\"),\n+                        List.of(\"11\", \"12\", \"13\", \"14\", \"15\"),\n+                        List.of(\"16\", \"17\", \"18\", \"19\", \"20\"),\n+                        List.of(\"21\", \"22\", \"23\", \"24\", \"25\")\n+                )\n+        );\n+\n+        System.out.println(result);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/lets_build_a_csv/MatrixJoiner.java",
                "content": "+package lets_build_a_csv;\n+\n+import java.util.List;\n+\n+@FunctionalInterface\n+public interface MatrixJoiner<T> {\n+    T join(List<List<T>> matrix);\n+}"
            },
            {
                "filename": "src/main/java/lets_build_a_csv/VectorJoiner.java",
                "content": "+package lets_build_a_csv;\n+\n+import java.util.List;\n+\n+@FunctionalInterface\n+public interface VectorJoiner<T> {\n+    T join(List<T> vector);\n+}"
            },
            {
                "filename": "src/test/java/lets_build_a_csv/CsvProcessorTest.java",
                "content": "+package lets_build_a_csv;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class CsvProcessorTest {\n+    private final List<List<String>> TABLE = List.of(\n+            List.of(\"1\", \"2\", \"3\", \"4\", \"5\"),\n+            List.of(\"6\", \"7\", \"8\", \"9\", \"10\"),\n+            List.of(\"11\", \"12\", \"13\", \"14\", \"15\"),\n+            List.of(\"16\", \"17\", \"18\", \"19\", \"20\"),\n+            List.of(\"21\", \"22\", \"23\", \"24\", \"25\")\n+    );\n+\n+    @Test\n+    void toCSV() {\n+        String result = CsvProcessor.toCSV(TABLE);\n+\n+        assertEquals(\"1, 2, 3, 4, 5\\n6, 7, 8, 9, 10\\n11, 12, 13, 14, 15\\n16, 17, 18, 19, 20\\n21, 22, 23, 24, 25\", result);\n+    }\n+}"
            }
        ],
        "comments": [
            {
                "file": "src/main/java/meta_universe/NotificationManager.java",
                "code": "@@ -0,0 +1,21 @@\n+package meta_universe;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+@Getter\n+@AllArgsConstructor\n+public class NotificationManager {\n+    private final Map<String, Consumer<Notification>> HANDLERS;",
                "suggestion": "Это не константа, просто поле. Поэтому handlers, маленькими",
                "lines": [
                    9,
                    12
                ],
                "date": "2024-10-09T11:19:20Z"
            }
        ]
    },
    {
        "task_name": "Meta-вселенная?",
        "url": "https://github.com/CorporationX/god_bless/pull/9471",
        "content": [
            {
                "filename": "src/main/java/faang/school/godbless/BJS2_22056/Main.java",
                "content": "+package faang.school.godbless.BJS2_22056;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        NotificationManager.registerHandler(\"email\", (notification) -> System.out.println(\"Отправка по электронной почте: \" + notification.getMessage()));\n+        NotificationManager.registerHandler(\"sms\", (notification) -> System.out.println(\"Отправка SMS: \" + notification.getMessage()));\n+        NotificationManager.registerHandler(\"push\", (notification) -> System.out.println(\"Отправка push-уведомления: \" + notification.getMessage()));\n+\n+        Notification emailNotification = new Notification(\"email\", \"Ваша учетная запись успешно активирована\");\n+        Notification smsNotification = new Notification(\"sms\", \"Вы успешно изменили свой пароль\");\n+        Notification pushNotification = new Notification(\"push\", \"Новый пост от пользователя: JohnDoe\");\n+\n+        NotificationManager.sendNotification(emailNotification);\n+        NotificationManager.sendNotification(smsNotification);\n+        NotificationManager.sendNotification(pushNotification);\n+    }\n+}"
            },
            {
                "filename": "src/main/java/faang/school/godbless/BJS2_22056/Notification.java",
                "content": "+package faang.school.godbless.BJS2_22056;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+@Data\n+@AllArgsConstructor\n+public class Notification {\n+    private final String type;\n+    private final String message;\n+}"
            },
            {
                "filename": "src/main/java/faang/school/godbless/BJS2_22056/NotificationManager.java",
                "content": "+package faang.school.godbless.BJS2_22056;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+public class NotificationManager {\n+    private static Map<String, Consumer> notificationCatalog = new HashMap<>();\n+\n+    public static void registerHandler(String id, Consumer<Notification> consumer) {\n+        notificationCatalog.put(id, consumer);\n+    }\n+\n+    public static void sendNotification(Notification notification) {\n+        Consumer<Notification> consumer = notificationCatalog.get(notification.getType());\n+        if (consumer != null) {\n+            consumer.accept(notification);\n+        } else {\n+            System.out.println(\"Не найден обработчик для типа: \" + notification.getType());\n+        }\n+    }\n+\n+}"
            }
        ],
        "comments": [
            {
                "filename": null,
                "code": null,
                "comment": "⚠️ **ОШЫБКА**: Ты создал PR в master ветку. PR-ы можно создавать только в СВОЮ ветку вида {имя_пользователя_discord}. Пожалуйста, нажми кнопку Edit вверху и измени ветку, в которую направляешь PR. После этого красная ошибка ниже должна пропасть, но этот комментарий останется - так и должно быть.",
                "line_range": null,
                "date": "2024-08-18T17:41:33Z"
            }
        ]
    }
]